# This file is for purpose of testing demo environment locally (without docker). It is generally copy-paste of
# /demo/docker/app/demo-application.conf which some minor changes (addresses, db location, http.port)
db {
  url: "jdbc:hsqldb:hsql://localhost/db;sql.syntax_ora=true"
  driver: "org.hsqldb.jdbc.JDBCDriver"
  user: "SA"
  password: ""
  connectionTimeout: 30000
}
jdbcServer {
  dbFilePath: "dbFiles/db"
  dbName: "db"
  user: "sa"
  password: ""
}
http {
  port: 8081
}
developmentMode: true

categoriesConfig: {
  "FraudDetection": "streaming",
  "Recommendations": "streaming",
  "Default": "streaming"
}

authentication: {
  method: "BasicAuth"
  usersFile: "../../nussknacker-dist/src/universal/conf/docker-users.conf"
}

environment: "demo"
attachmentsPath: "/tmp/touk/nussknacker-frontend/attachments"

akka {
  http {
    server.parsing.max-content-length = 300000000 #300MB
  }
}

customProcesses {}

flinkConfig {
  restUrl: "http://localhost:8081"
  queryableStateProxyUrl: "localhost:9069"
  parallelism: 4
  jobManagerTimeout: 1m
  classpath: ["../../engine/example/target/scala-2.11/nussknacker-example-assembly-0.0.12-SNAPSHOT.jar"]
}

metricsSettings {
  url: "/grafana/dashboard/db/$dashboard?theme=dark&var-processName=$process&var-env=demo"
  defaultDashboard: "flink-esp"
  processingTypeToDashboard: {
    "request-response": "standalone",
    "streaming": "flink-esp"
  }
}

countsSettings {
  influxUrl: "http://localhost:3000/api/datasources/proxy/1/query"
  user: "admin"
  password: "admin"
}

kibanaSettings {
  url: "/kibana/"
}

#Add your model configuration here
processConfig {
  timeout: 10s
  checkpointInterval: 10m
  asyncExecutionConfig {
    bufferSize: 200
    parallelismMultiplier: 2
  }
  restartInterval: "10s"
  kafka = {
    kafkaAddress = "localhost:9092"
  }

  #TODO: add sample parameter configuration
  nodes {
    clientService {
      docsUrl: "https://en.wikipedia.org/wiki/Customer_service"
    }
  }
}
