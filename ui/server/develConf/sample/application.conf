// Comment settings example:
commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

http {
  port: 8081
}

globalBuildInfo {
  test_param: "testValue1"
  otherParam: "testValue2"
}

db {
  url: "jdbc:hsqldb:hsql://localhost/db;sql.syntax_ora=true"
  driver: "org.hsqldb.jdbc.JDBCDriver"
  password: ""
  user: "SA"
  connectionTimeout: 30000
}

deploySettings: {
  requireComment: false
}

jdbcServer {
  dbFilePath: "dbFiles/db"
  dbName: "db"
  user: "sa"
  password: ""
}

customProcesses: {
  "customProcess1": "pl.touk.custom.NonExistingCustomProcess"
}

authentication: {
  backend: "OAuth2",
  authenticationUrl: "",
  redirectUri: "http://localhost:8081/api/authentication/oauth2",
  clientSecret: "",
  clientId: "",
  profileUri: "",
  tokenUri: "",
  headers: {
    Authorization: ""
  },
  accessTokenParams: {
    grant_type: "authorization_code"
  },
  authorizeParams: {
    response_type: "code"
  }
}

usersFile: "./develConf/sample/users.conf"
environmentAlert: {
  content: "DEVELOPMENT ENVIRONMENT"
  cssClass: "indicator-green"
}
developmentMode: true

environment: "test"
attachmentsPath: "/tmp/attachments"

metricsSettings {
  url: "http://localhost:8082/grafana/dashboard/db/$dashboard?theme=dark&var-processName=$process&var-env=test"
  defaultDashboard: "flink-esp"
  processingTypeToDashboard: {
    "request-response": "standalone",
    "streaming": "flink-esp"
  }
}

countsSettings {
  user: "touk_esp"
  password: "widacmetryki"
  influxUrl: "http://p4.grafana/api/datasources/proxy/54/query"
  database: "esp"
}

kibanaSettings {
  url: "http://localhost:8080"
}

secondaryEnvironment {
  user: "admin"
  password: "admin"
  targetEnvironmentId: "localtest"
  remoteConfig: {
    uri: "http://localhost:8081/api",
    batchSize: 10
  }
}

hostName: "terefere"
graphite: {
  hostName: "poc-esp2"
  port: 2003
  protocol: "udp"
}
standaloneEngineProcessLocation: "/tmp/standaloneProcesses"

categoriesConfig: {
  "Category1": "streaming",
  "Category2": "streaming2",
  "StandaloneCategory1": "request-response"
}

processTypes {
  "streaming": {
    engineConfig {
      type: "flinkStreaming"
      jobManagerTimeout: 1m
      restUrl: "http://localhost:8081"
    }
    modelConfig = ${processConfig}
  }
  "streaming2": {
    modelConfig = ${processConfig}
    engineConfig {
      type: "flinkStreaming"
      jobManagerTimeout: 1m
      restUrl: "http://localhost:8081"
    }
  }
  "request-response": {
    modelConfig {
      classPath: ["../../engine/standalone/engine/sample/target/scala-2.11/standaloneSample.jar"]
      environment: "test"
    }
    engineConfig {
      type: "requestResponseStandalone"
      managementUrl: "http://localhost:8070"
    }
  }
}

processConfig {
  classPath: ["../../engine/flink/management/sample/target/scala-2.11/managementSample.jar"]

  timeout: 10s
  checkpointInterval: 10s

  kafka = {
    kafkaAddress = "localhost:9092"
  }
  asyncExecutionConfig {
    bufferSize: 50
    parallelismMultiplier: 1
  }

  signals {
    topic: "esp.dev.signals"
  }
}

akka {
  http {
    server.parsing.max-content-length = 300000000 #300MB
    server.parsing.max-uri-length = 200000
  }
}
