#We use defaultUConfig.conf instead of reference.conf, as we don't want these properties in config loaded in model configuration
#This configuration file contains sensible designer defaults for all Nussknacker deployments, without assumptions about deployment models and external tools (grafana, flink etc.)
#All models configurations also shouldn't be in this file

storageDir: ./storage
storageDir: ${?STORAGE_DIR}

db {
  url: "jdbc:hsqldb:file:"${storageDir}"/db;sql.syntax_ora=true"
  url: ${?DB_URL}
  driver: "org.hsqldb.jdbc.JDBCDriver"
  driver: ${?DB_DRIVER}
  user: "SA"
  user: ${?DB_USER}
  password: ""
  password: ${?DB_PASSWORD}
  connectionTimeout: 30000
  connectionTimeout: ${?DB_CONNECTION_TIMEOUT}
  #we use low values here, as NK UI is not very data-intensive
  maximumPoolSize: 5
  minimumIdle: 1
  #has to be lower <= maxConnections
  numThreads: 5
}

http {
  port: 8080
  port: ${?HTTP_PORT}
  interface: "0.0.0.0"
  interface: ${?HTTP_INTERFACE}
  publicPath: ""
  publicPath: ${?HTTP_PUBLIC_PATH}
}

environment: "default"

akka {
  http {
    server {
      parsing {
        max-content-length = 300000000 #300MB
        # because FE sometimes send not encoded properly urls - e.g. scenario name with [square brackets]
        uri-parsing-mode = relaxed
      }
      # Longer mainly for invoking tests on processes
      request-timeout = 1 minute
      # We don't want to implement HEAD handler correctly - default one is fine for us.
      transparent-head-requests = true
    }
    //By default, akka-http has long mex-connection-backoff (2 minutes) per host,
    //we do not handle them well, as we have much shorter timeouts, which may result in stalls etc.
    host-connection-pool {
      max-connection-backoff = 1 second
    }
  }
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

intervalTimeSettings: {
  processes: 20000
  healthCheck: 30000
}

authentication: {
  method: "BasicAuth"
  method: ${?AUTHENTICATION_METHOD}
  clientSecret: ${?OAUTH2_CLIENT_SECRET}
  clientId: ${?OAUTH2_CLIENT_ID}
  authorizeUri: ${?OAUTH2_AUTHORIZE_URI}
  redirectUri: ${?OAUTH2_REDIRECT_URI}
  accessTokenUri: ${?OAUTH2_ACCESS_TOKEN_URI}
  profileUri: ${?OAUTH2_PROFILE_URI}
  profileFormat: ${?OAUTH2_PROFILE_FORMAT}
  implicitGrantEnabled: ${?OAUTH2_IMPLICIT_GRANT_ENABLED}
  jwt {
    enabled: false #deprecated: use accessTokenIsJwt and/or userinfoFromIdToken
    enabled: ${?OAUTH2_JWT_ENABLED}
    accessTokenIsJwt: ${authentication.jwt.enabled}
    accessTokenIsJwt: ${?OAUTH2_ACCESS_TOKEN_IS_JWT}
    userinfoFromIdToken: ${authentication.jwt.enabled}
    userinfoFromIdToken: ${?OAUTH2_USERINFO_FROM_ID_TOKEN}
    audience: ${?OAUTH2_JWT_AUDIENCE}
    publicKey: ${?OAUTH2_JWT_AUTH_SERVER_PUBLIC_KEY}
    publicKeyFile: ${?OAUTH2_JWT_AUTH_SERVER_PUBLIC_KEY_FILE}
    certificate: ${?OAUTH2_JWT_AUTH_SERVER_CERTIFICATE}
    certificateFile: ${?OAUTH2_JWT_AUTH_SERVER_CERTIFICATE_FILE}
    idTokenNonceVerificationRequired: ${?OAUTH2_JWT_ID_TOKEN_NONCE_VERIFICATION_REQUIRED}
  }
  accessTokenParams {
    grant_type: "authorization_code"
    grant_type: ${?OAUTH2_GRANT_TYPE}
  }
  authorizeParams {
    response_type: "code"
    response_type: ${?OAUTH2_RESPONSE_TYPE}
    scope: "read:user"
    scope: ${?OAUTH2_SCOPE}
    audience: ${?OAUTH2_AUDIENCE}
  }
  usernameClaim: ${?OAUTH2_USERNAME_CLAIM}
  headers {
    Accept: "application/json"
    Accept: ${?AUTHENTICATION_HEADERS_ACCEPT}
  }
  usersFile: "./conf/users.conf"
  usersFile: ${?AUTHENTICATION_USERS_FILE}
}

processToolbarConfig {
  defaultConfig {
    topLeft: [
      { type: "tips-panel" }
      { type: "creator-panel", hidden: { archived: true } }
      { type: "versions-panel" }
      { type: "comments-panel" }
      { type: "attachments-panel" }
    ]
    topRight: [
      { type: "process-info-panel" }
      {
        type: "process-actions-panel"
        buttons: [
          { type: "process-save", title: "Save changes", disabled: { archived: true } }
          { type: "process-deploy", disabled: { fragment: true, archived: true, type: "oneof" } }
          { type: "process-cancel", disabled: { fragment: true, archived: true, type: "oneof" } }
          { type: "custom-link", name: "metrics", icon: "/assets/buttons/metrics.svg", url: "/metrics/$processName", disabled: { fragment: true } }
        ]
      }
      {
        id: "view-panel"
        type: "buttons-panel"
        title: "view"
        buttons: [
          { type: "view-zoom-in" }
          { type: "view-zoom-out" }
          { type: "view-reset" }
        ]
      }
      {
        id: "edit-panel"
        type: "buttons-panel"
        title: "edit"
        hidden: { archived: true }
        buttonsVariant: "small"
        buttons: [
          { type: "edit-undo" }
          { type: "edit-redo" }
          { type: "edit-copy" }
          { type: "edit-paste" }
          { type: "edit-delete" }
          { type: "edit-layout" }
        ]
      }
      {
        id: "process-panel"
        type: "buttons-panel"
        title: "scenario"
        buttons: [
          { type: "process-properties" }
          { type: "process-compare" }
          { type: "process-migrate", disabled: { archived: true } }
          { type: "process-import", disabled: { archived: true } }
          { type: "process-json" }
          { type: "process-pdf" }
          { type: "process-archive", hidden: { archived: true } }
          { type: "process-unarchive", hidden: { archived: false } }
        ]
      }
      {
        id: "test-panel"
        type: "buttons-panel"
        title: "test"
        buttons: [
          { type: "generate-and-test", disabled: { archived: true }, hidden: { fragment: true } }
          { type: "test-with-form", disabled: { archived: true } }
          { type: "test-from-file", disabled: { archived: true }, hidden: { fragment: true } }
          { type: "test-generate", disabled: { archived: true }, hidden: { fragment: true } }
          { type: "test-counts" }
          { type: "test-hide" }
        ]
      }
    ]
  }
}

componentsAppUrl: "nu_components/list@"${http.publicPath}"/submodules/components/remoteEntry.js"
componentsAppUrl: ${?NU_FE_COMPONENTS_URL}

scenariosAppUrl: "nu_components/scenarios@"${http.publicPath}"/submodules/components/remoteEntry.js"
scenariosAppUrl: ${?NU_FE_SCENARIOS_URL}

tabs: [
  {id: "scenarios", url: ${scenariosAppUrl}, title: "Scenarios", type: "Remote"},
  {id: "components", url: ${componentsAppUrl}, title: "Components", type: "Remote"}
  {id: "docs", url: "https://nussknacker.io/documentation/", title: "Docs", type: "Url"}
]

testDataSettings: {
  maxSamplesCount: 20
  testDataMaxLength: 200000
  resultsMaxBytes: 50000000
}

surveySettings: {
  key: "welcome"
  text: "We are happy to see you using Nussknacker. It would help us a ton to know a little more about you and how Nussknacker is helping you. Fill out our survey and get a free full-day Nussknacker workshop!"
  link: "https://nussknacker.io/survey"
}

notifications {
  duration: 24 hours
}

usageStatisticsReports {
  enabled: true
  fingerprint: ${?USAGE_REPORTS_FINGERPRINT}
  source: ${?USAGE_REPORTS_SOURCE}
}

repositoryGaugesCacheDuration: 10 seconds

scenarioStateTimeout: 5 seconds
