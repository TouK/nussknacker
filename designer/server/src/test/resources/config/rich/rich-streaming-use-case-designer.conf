include "../common-designer.conf"

authentication:  {
  method: "BasicAuth"
  usersFile: "designer/server/src/test/resources/config/rich/basicauth-users.conf"
}

scenarioTypes {
  streaming1 {
    deploymentConfig {
      restUrl: "http://localhost:8081"
      jobManagerTimeout: 1m
      type: "flinkStreaming"
    }
    modelConfig {
      classPath: [
        "engine/flink/management/dev-model/target/scala-"${scala.major.version}"/devModel.jar",
        "engine/flink/executor/target/scala-"${scala.major.version}"/flinkExecutor.jar"
      ]
      checkpointConfig {
        checkpointInterval: 10s
      }
      timeout: 30s
      asyncExecutionConfig {
        bufferSize: 200
        workers: 8
      }
      kafka = {
        kafkaProperties {
          "bootstrap.servers": "notexisting.org:9092"
        }
      }

      withMockedConfluent: true

      documentationBase: "https://touk.github.io/nussknacker/"

      scenarioPropertiesConfig {
        environment {
          value: "OverriddenByConf"
        }
      }

      configValueToLoadFrom: "someDummyValue"

      componentsUiConfig: {
        enricher: {
          params {
            param: {
              defaultValue: "'default value'"
              editor: {
                type: "StringParameterEditor"
              }
            }
          }
          icon: "/assets/components/Filter.svg"
        }
        test1: {
          icon: "/assets/components/Sink.svg"
        }
        multipleParamsService: {
          params {
            baz: {
              editor: {
                type: "FixedValuesParameterEditor",
                possibleValues: [
                  {"label": "1", "expression": "1"},
                  {"label": "2", "expression": "2"}
                ]
              },
              hintText: "some hint text"
            }
          }
        }
        dynamicMultipleParamsService: {
          params {
            foo: {
              defaultValue: "'fooValueFromConfig'"
            }
          }
        }
        optionalTypesService: {
          params {
            overriddenByFileConfigParam: {
              validators: []
            }
          }
        }
        simpleTypesService: {
          params {
            booleanParam: {
              validators: []
            }
          }
        }
      }

      componentsGroupMapping: {
        "base":"base"
        "custom":"base"
        "hiddenComponentGroup":null
      }
    }
    category: "Category1"
  }
  streaming2 {
    deploymentConfig {
      restUrl: "http://localhost:8081"
      jobManagerTimeout: 1m
      type: "flinkStreaming"
    }
    modelConfig {
      classPath: [
        "engine/flink/management/dev-model/target/scala-"${scala.major.version}"/devModel.jar",
        "engine/flink/executor/target/scala-"${scala.major.version}"/flinkExecutor.jar"
      ]
      kafka = {
        kafkaProperties {
          "bootstrap.servers": "notexisting.org:9092"
        }
      }
      withMockedConfluent: true
      #We disable kafka ComponentProvider from kafkaLite, which is unnecessarily added to classpath when running in Idea...
      components {
        kafka.disabled: true
      }
    }
    category: "Category2"
  }
}
