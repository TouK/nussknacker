package pl.touk.nussknacker.engine.flink.api.process

import org.apache.flink.streaming.api.datastream.{DataStream, SingleOutputStreamOperator}
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment
import pl.touk.nussknacker.engine.api.Context
import pl.touk.nussknacker.engine.api.process.{BasicContextInitializer, ContextInitializer, Source, SourceTestSupport}
import pl.touk.nussknacker.engine.api.typed.typing.Unknown
import pl.touk.nussknacker.engine.flink.api.compat.ExplicitUidInOperatorsSupport
import pl.touk.nussknacker.engine.flink.api.timestampwatermark.TimestampWatermarkHandler

/**
  * Source with methods specific for Flink
  */
trait FlinkSource extends Source {

  def contextStream(
      env: StreamExecutionEnvironment,
      flinkNodeContext: FlinkCustomNodeContext
  ): DataStream[Context]

}

/**
  * Support for test mechanism for typical flink sources.
  *
  * @tparam Raw - type of raw event that is generated by flink source function.
  *             This is needed to handle e.g. syntax suggestions in UI (in sources with explicite @MethodToInvoke).
  */
trait FlinkSourceTestSupport[Raw] extends SourceTestSupport[Raw] {
  self: Source =>

  // TODO: design better way of handling test data in generic FlinkSource
  // Probably we *still* want to use CollectionSource (and have some custom logic in parser if needed), but timestamps
  // have to be handled here for now
  def timestampAssignerForTest: Option[TimestampWatermarkHandler[Raw]]

}

/**
 * Source providing standard logic for transforming a `DataStreamSource[Raw]` into `DataStream[Context]` using
 * customizable [[ContextInitializer]] and [[TimestampWatermarkHandler]].
 *
 * @tparam Raw - type of raw event that is generated by flink source function.
 */
trait StandardFlinkSource[Raw]
    extends FlinkSource
    with CustomizableContextInitializerSource[Raw]
    with CustomizableTimestampWatermarkHandlerSource[Raw]
    with ExplicitUidInOperatorsSupport {

  protected def sourceStream(
      env: StreamExecutionEnvironment,
      flinkNodeContext: FlinkCustomNodeContext
  ): DataStream[Raw]

  override final def contextStream(
      env: StreamExecutionEnvironment,
      flinkNodeContext: FlinkCustomNodeContext
  ): DataStream[Context] = {
    val streamOfRaw = sourceStream(env, flinkNodeContext)
    // 1. set UID and override source name
    val rawSourceWithUid = streamOfRaw match {
      case singleOut: SingleOutputStreamOperator[_] =>
        setUidToNodeIdIfNeed[Raw](
          flinkNodeContext,
          singleOut.name(flinkNodeContext.nodeId)
        )
      case _ => streamOfRaw
    }

    // 2. assign timestamp and watermark policy
    val rawSourceWithUidAndTimestamp = timestampAssigner
      .map(_.assignTimestampAndWatermarks(rawSourceWithUid))
      .getOrElse(rawSourceWithUid)

    // 3. initialize Context and spool Context to the stream
    rawSourceWithUidAndTimestamp
      .map(
        new FlinkContextInitializingFunction(
          contextInitializer,
          flinkNodeContext.nodeId,
          flinkNodeContext.convertToEngineRuntimeContext
        ),
        flinkNodeContext.contextTypeInfo
      )
  }

}

trait CustomizableContextInitializerSource[Raw] { self: Source =>
  def contextInitializer: ContextInitializer[Raw] = new BasicContextInitializer[Raw](Unknown)
}

trait CustomizableTimestampWatermarkHandlerSource[Raw] { self: Source =>
  def timestampAssigner: Option[TimestampWatermarkHandler[Raw]] = None
}
