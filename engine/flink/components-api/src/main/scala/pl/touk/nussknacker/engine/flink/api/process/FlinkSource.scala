package pl.touk.nussknacker.engine.flink.api.process

import org.apache.flink.api.common.typeinfo.TypeInformation
import org.apache.flink.streaming.api.datastream.{DataStream, DataStreamSource}
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment
import pl.touk.nussknacker.engine.api.Context
import pl.touk.nussknacker.engine.api.process.{BasicContextInitializer, ContextInitializer, Source, SourceTestSupport}
import pl.touk.nussknacker.engine.api.typed.typing.Unknown
import pl.touk.nussknacker.engine.flink.api.timestampwatermark.TimestampWatermarkHandler

/**
  * Source with methods specific for Flink
  */
trait FlinkSource extends Source {

  // TODO: rename to contextStream?
  def sourceStream(
      env: StreamExecutionEnvironment,
      flinkNodeContext: FlinkCustomNodeContext
  ): DataStream[Context]

}

/**
  * Support for test mechanism for typical flink sources.
  *
  * @tparam Raw - type of raw event that is generated by flink source function.
  *             This is needed to handle e.g. syntax suggestions in UI (in sources with explicite @MethodToInvoke).
  */
trait FlinkSourceTestSupport[Raw] extends SourceTestSupport[Raw] with ExplicitTypeInformationSource[Raw] {
  self: FlinkSource =>

  // TODO: design better way of handling test data in generic FlinkSource
  // Probably we *still* want to use CollectionSource (and have some custom logic in parser if needed), but timestamps
  // have to be handled here for now
  def timestampAssignerForTest: Option[TimestampWatermarkHandler[Raw]]

}

/**
 * Standard source providing default logic for transforming a `DataStreamSource[Raw]` into `DataStream[Context]` using
 * customizable [[ContextInitializer]] and [[TimestampWatermarkHandler]].
 * 
 * @tparam Raw - type of raw event that is generated by flink source function.
 */
trait StandardFlinkSource[Raw]
    extends FlinkSource
    with CustomizableContextInitializerSource[Raw]
    with CustomizableTimestampWatermarkHandlerSource[Raw] {

  def initialSourceStream(
      env: StreamExecutionEnvironment,
      flinkNodeContext: FlinkCustomNodeContext
  ): DataStreamSource[Raw]

  override final def sourceStream(
      env: StreamExecutionEnvironment,
      flinkNodeContext: FlinkCustomNodeContext
  ): DataStream[Context] = {
    FlinkStandardSourceUtils.createContextStream(
      source = initialSourceStream(env, flinkNodeContext),
      flinkNodeContext = flinkNodeContext,
      timestampAssigner = timestampAssigner,
      contextInitializer = contextInitializer
    )
  }

}

trait CustomizableContextInitializerSource[Raw] { self: FlinkSource =>
  def contextInitializer: ContextInitializer[Raw] = new BasicContextInitializer[Raw](Unknown)
}

trait CustomizableTimestampWatermarkHandlerSource[Raw] { self: FlinkSource =>
  def timestampAssigner: Option[TimestampWatermarkHandler[Raw]] = None
}

trait ExplicitTypeInformationSource[Raw] { self: FlinkSource =>
  def typeInformation: TypeInformation[Raw]
}
