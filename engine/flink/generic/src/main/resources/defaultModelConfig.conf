{
  signals {
    topic: "nk.signals"
    topic: ${?SIGNALS_TOPIC}
  }

  timeout: 10s
  checkpointConfig {
    checkpointInterval: 10m
  }
  rocksDB {
    enable: true
  }

  asyncExecutionConfig {
    bufferSize: 200
    workers: 8
    defaultUseAsyncInterpretation: true
  }

  restartStrategy {
    default {
      strategy: disable
    }
  }

  exceptionHandler {
    type: BrieflyLogging
    withRateMeter: true
  }

  #TODO: generate links to proper documentation version
  baseNodeDocs: "https://nussknacker.io/documentation/docs/scenarios_authoring/"

  #TODO: consider defining docs with code, not in config
  componentsUiConfig: {
    aggregate-session: {
      docsUrl: ${baseNodeDocs}"AggregatesInTimeWindows#session-window"
    },
    aggregate-sliding: {
      docsUrl: ${baseNodeDocs}"AggregatesInTimeWindows#sliding-window"
    },
    aggregate-tumbling: {
      docsUrl: ${baseNodeDocs}"AggregatesInTimeWindows#tumbling-window"
    },
    single-side-join: {
      docsUrl: ${baseNodeDocs}"AggregatesInTimeWindows#single-side-join"
    },
    union: {
      docsUrl: ${baseNodeDocs}"BasicNodes#union"
    }
    union-memo: {
      docsUrl: ${baseNodeDocs}"BasicNodes#unionmemo"
    }
    previousValue: {
      docsUrl: ${baseNodeDocs}"BasicNodes#previousvalue"
    }
    filter: {
      docsUrl: ${baseNodeDocs}"BasicNodes#filter"
    }
    variable: {
      docsUrl: ${baseNodeDocs}"BasicNodes#variable-component"
    }
    mapVariable: {
      docsUrl: ${baseNodeDocs}"BasicNodes#mapvariable"
    }
    switch: {
      docsUrl: ${baseNodeDocs}"BasicNodes#switch"
    }
    split: {
      docsUrl: ${baseNodeDocs}"BasicNodes#split"
    }
    input {
      docsUrl: ${baseNodeDocs}"Fragments#inputs"
    }
    subprocessInputDefinition {
      docsUrl: ${baseNodeDocs}"Fragments#inputs"
    }
    subprocessOutputDefinition {
      docsUrl: ${baseNodeDocs}"Fragments#outputs"
    }
    kafka-avro {
      docsUrl: ${baseNodeDocs}"DataSourcesAndSinks#schema-registry--avro-serialization"
    }
    kafka-avro-raw {
      docsUrl: ${baseNodeDocs}"DataSourcesAndSinks#schema-registry--avro-serialization"
    }
    kafka-json {
      docsUrl: ${baseNodeDocs}"DataSourcesAndSinks#no-type-information--json-serialization"
    }
    kafka-registry-typed-json {
      docsUrl: ${baseNodeDocs}"DataSourcesAndSinks#schema-registry--json-serialization"
    }
    kafka-registry-typed-json-raw {
      docsUrl: ${baseNodeDocs}"DataSourcesAndSinks#schema-registry--json-serialization"
    }
    kafka-typed-json {
      docsUrl: ${baseNodeDocs}"DataSourcesAndSinks#manually-typed--json-serialization"
    }
  }
  componentsGroupMapping {
    hidden: null
  }
}
