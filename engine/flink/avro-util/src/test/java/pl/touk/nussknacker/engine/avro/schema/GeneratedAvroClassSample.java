/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pl.touk.nussknacker.engine.avro.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GeneratedAvroClassSample extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1214150852948076316L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeneratedAvroClassSample\",\"namespace\":\"pl.touk.nussknacker.engine.avro.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"ratio\",\"type\":\"float\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"SampleStatus\",\"symbols\":[\"OK\",\"ERROR\"]},\"default\":\"OK\"},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"SampleLocation\",\"fields\":[{\"name\":\"x_pos\",\"type\":\"long\"},{\"name\":\"y_pos\",\"type\":\"long\"}]}},{\"name\":\"customers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SampleCustomer\",\"fields\":[{\"name\":\"first_name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"last_name\",\"type\":[\"null\",\"string\"],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GeneratedAvroClassSample> ENCODER =
      new BinaryMessageEncoder<GeneratedAvroClassSample>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GeneratedAvroClassSample> DECODER =
      new BinaryMessageDecoder<GeneratedAvroClassSample>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GeneratedAvroClassSample> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GeneratedAvroClassSample> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GeneratedAvroClassSample> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GeneratedAvroClassSample>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GeneratedAvroClassSample to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GeneratedAvroClassSample from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GeneratedAvroClassSample instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GeneratedAvroClassSample fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long id;
   private CharSequence title;
   private float ratio;
   private CharSequence description;
   private SampleStatus state;
   private SampleLocation location;
   private java.util.List<SampleCustomer> customers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GeneratedAvroClassSample() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param title The new value for title
   * @param ratio The new value for ratio
   * @param description The new value for description
   * @param state The new value for state
   * @param location The new value for location
   * @param customers The new value for customers
   */
  public GeneratedAvroClassSample(Long id, CharSequence title, Float ratio, CharSequence description, SampleStatus state, SampleLocation location, java.util.List<SampleCustomer> customers) {
    this.id = id;
    this.title = title;
    this.ratio = ratio;
    this.description = description;
    this.state = state;
    this.location = location;
    this.customers = customers;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return title;
    case 2: return ratio;
    case 3: return description;
    case 4: return state;
    case 5: return location;
    case 6: return customers;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (Long)value$; break;
    case 1: title = (CharSequence)value$; break;
    case 2: ratio = (Float)value$; break;
    case 3: description = (CharSequence)value$; break;
    case 4: state = (SampleStatus)value$; break;
    case 5: location = (SampleLocation)value$; break;
    case 6: customers = (java.util.List<SampleCustomer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'ratio' field.
   * @return The value of the 'ratio' field.
   */
  public float getRatio() {
    return ratio;
  }


  /**
   * Sets the value of the 'ratio' field.
   * @param value the value to set.
   */
  public void setRatio(float value) {
    this.ratio = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public SampleStatus getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(SampleStatus value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public SampleLocation getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(SampleLocation value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'customers' field.
   * @return The value of the 'customers' field.
   */
  public java.util.List<SampleCustomer> getCustomers() {
    return customers;
  }


  /**
   * Sets the value of the 'customers' field.
   * @param value the value to set.
   */
  public void setCustomers(java.util.List<SampleCustomer> value) {
    this.customers = value;
  }

  /**
   * Creates a new GeneratedAvroClassSample RecordBuilder.
   * @return A new GeneratedAvroClassSample RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new GeneratedAvroClassSample RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GeneratedAvroClassSample RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new GeneratedAvroClassSample RecordBuilder by copying an existing GeneratedAvroClassSample instance.
   * @param other The existing instance to copy.
   * @return A new GeneratedAvroClassSample RecordBuilder
   */
  public static Builder newBuilder(GeneratedAvroClassSample other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for GeneratedAvroClassSample instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeneratedAvroClassSample>
    implements org.apache.avro.data.RecordBuilder<GeneratedAvroClassSample> {

    private long id;
    private CharSequence title;
    private float ratio;
    private CharSequence description;
    private SampleStatus state;
    private SampleLocation location;
    private SampleLocation.Builder locationBuilder;
    private java.util.List<SampleCustomer> customers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ratio)) {
        this.ratio = data().deepCopy(fields()[2].schema(), other.ratio);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.location)) {
        this.location = data().deepCopy(fields()[5].schema(), other.location);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = SampleLocation.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[6], other.customers)) {
        this.customers = data().deepCopy(fields()[6].schema(), other.customers);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing GeneratedAvroClassSample instance
     * @param other The existing instance to copy.
     */
    private Builder(GeneratedAvroClassSample other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ratio)) {
        this.ratio = data().deepCopy(fields()[2].schema(), other.ratio);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.description)) {
        this.description = data().deepCopy(fields()[3].schema(), other.description);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.location)) {
        this.location = data().deepCopy(fields()[5].schema(), other.location);
        fieldSetFlags()[5] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[6], other.customers)) {
        this.customers = data().deepCopy(fields()[6].schema(), other.customers);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public Builder setTitle(CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ratio' field.
      * @return The value.
      */
    public float getRatio() {
      return ratio;
    }


    /**
      * Sets the value of the 'ratio' field.
      * @param value The value of 'ratio'.
      * @return This builder.
      */
    public Builder setRatio(float value) {
      validate(fields()[2], value);
      this.ratio = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ratio' field has been set.
      * @return True if the 'ratio' field has been set, false otherwise.
      */
    public boolean hasRatio() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ratio' field.
      * @return This builder.
      */
    public Builder clearRatio() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public Builder setDescription(CharSequence value) {
      validate(fields()[3], value);
      this.description = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public Builder clearDescription() {
      description = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public SampleStatus getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public Builder setState(SampleStatus value) {
      validate(fields()[4], value);
      this.state = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public Builder clearState() {
      state = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public SampleLocation getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public Builder setLocation(SampleLocation value) {
      validate(fields()[5], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public SampleLocation.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(SampleLocation.newBuilder(location));
        } else {
          setLocationBuilder(SampleLocation.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setLocationBuilder(SampleLocation.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'customers' field.
      * @return The value.
      */
    public java.util.List<SampleCustomer> getCustomers() {
      return customers;
    }


    /**
      * Sets the value of the 'customers' field.
      * @param value The value of 'customers'.
      * @return This builder.
      */
    public Builder setCustomers(java.util.List<SampleCustomer> value) {
      validate(fields()[6], value);
      this.customers = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'customers' field has been set.
      * @return True if the 'customers' field has been set, false otherwise.
      */
    public boolean hasCustomers() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'customers' field.
      * @return This builder.
      */
    public Builder clearCustomers() {
      customers = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GeneratedAvroClassSample build() {
      try {
        GeneratedAvroClassSample record = new GeneratedAvroClassSample();
        record.id = fieldSetFlags()[0] ? this.id : (Long) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (CharSequence) defaultValue(fields()[1]);
        record.ratio = fieldSetFlags()[2] ? this.ratio : (Float) defaultValue(fields()[2]);
        record.description = fieldSetFlags()[3] ? this.description : (CharSequence) defaultValue(fields()[3]);
        record.state = fieldSetFlags()[4] ? this.state : (SampleStatus) defaultValue(fields()[4]);
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[5] ? this.location : (SampleLocation) defaultValue(fields()[5]);
        }
        record.customers = fieldSetFlags()[6] ? this.customers : (java.util.List<SampleCustomer>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GeneratedAvroClassSample>
    WRITER$ = (org.apache.avro.io.DatumWriter<GeneratedAvroClassSample>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GeneratedAvroClassSample>
    READER$ = (org.apache.avro.io.DatumReader<GeneratedAvroClassSample>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.title);

    out.writeFloat(this.ratio);

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    out.writeEnum(this.state.ordinal());

    this.location.customEncode(out);

    long size0 = this.customers.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (SampleCustomer e0: this.customers) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);

      this.ratio = in.readFloat();

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
      }

      this.state = SampleStatus.values()[in.readEnum()];

      if (this.location == null) {
        this.location = new SampleLocation();
      }
      this.location.customDecode(in);

      long size0 = in.readArrayStart();
      java.util.List<SampleCustomer> a0 = this.customers;
      if (a0 == null) {
        a0 = new SpecificData.Array<SampleCustomer>((int)size0, SCHEMA$.getField("customers").schema());
        this.customers = a0;
      } else a0.clear();
      SpecificData.Array<SampleCustomer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<SampleCustomer>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          SampleCustomer e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new SampleCustomer();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          break;

        case 2:
          this.ratio = in.readFloat();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          }
          break;

        case 4:
          this.state = SampleStatus.values()[in.readEnum()];
          break;

        case 5:
          if (this.location == null) {
            this.location = new SampleLocation();
          }
          this.location.customDecode(in);
          break;

        case 6:
          long size0 = in.readArrayStart();
          java.util.List<SampleCustomer> a0 = this.customers;
          if (a0 == null) {
            a0 = new SpecificData.Array<SampleCustomer>((int)size0, SCHEMA$.getField("customers").schema());
            this.customers = a0;
          } else a0.clear();
          SpecificData.Array<SampleCustomer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<SampleCustomer>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              SampleCustomer e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new SampleCustomer();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










