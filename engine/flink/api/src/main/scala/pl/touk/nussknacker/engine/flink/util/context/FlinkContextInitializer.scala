package pl.touk.nussknacker.engine.flink.util.context

import org.apache.flink.api.common.functions.MapFunction
import pl.touk.nussknacker.engine.api.Context
import pl.touk.nussknacker.engine.api.context.ProcessCompilationError.NodeId
import pl.touk.nussknacker.engine.api.context.ValidationContext
import pl.touk.nussknacker.engine.api.typed.typing

/**
  * FlinkContextInitializer provides definition of Context returned within DataStream by FlinkSource
  * and map function that transforms raw input to Context.
  *
  * @tparam T - type of event that is generated by raw source.
  */
abstract class FlinkContextInitializer[T] extends Serializable {

  def validationContext(context: ValidationContext, name: String, result: typing.TypingResult)(implicit nodeId: NodeId): ValidationContext

  def initContext(processId: String, taskName: String): MapFunction[T, Context]
}

/**
  * Basic context initializer. Used when raw event produced by SourceFunction does not need further transformations and
  * should be assigned to default "input" variable directly.
  *
  * @tparam T - type of event that is generated by raw source.
  */
class BasicFlinkContextInitializer[T] extends FlinkContextInitializer[T] {

  override def validationContext(context: ValidationContext, name: String, result: typing.TypingResult)(implicit nodeId: NodeId): ValidationContext =
    context.withVariable(name, result, None).getOrElse(context)

  override def initContext(processId: String, taskName: String): MapFunction[T, Context] =
    new InitContextFunction[T](processId, taskName)

}
