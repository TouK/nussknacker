package pl.touk.nussknacker.engine.flink.api.process

import org.apache.flink.api.common.functions.{MapFunction, RichMapFunction}
import org.apache.flink.configuration.Configuration
import pl.touk.nussknacker.engine.api.{Context, VariableConstants}
import pl.touk.nussknacker.engine.api.context.ProcessCompilationError.NodeId
import pl.touk.nussknacker.engine.api.context.ValidationContext
import pl.touk.nussknacker.engine.api.context.transformation.{BaseDefinedParameter, NodeDependencyValue}
import pl.touk.nussknacker.engine.api.definition.OutputVariableNameDependency
import pl.touk.nussknacker.engine.api.typed.typing.TypingResult
import pl.touk.nussknacker.engine.flink.util.ContextInitializingFunction


/**
  * Basic implementation of context initializer. Used when raw event produced by SourceFunction does not need further transformations and
  * should be assigned to default "input" variable directly.
  *
  * @tparam Raw - type of raw event that is generated by flink source function.
  */
class BasicFlinkContextInitializer[Raw] extends FlinkContextInitializer[Raw] {

  override def initContext(processId: String, taskName: String): MapFunction[Raw, Context] =
    new BasicContextInitializingFunction[Raw](processId, taskName)
}

/**
  * Basic implementation of context initializer for sources based on [[pl.touk.nussknacker.engine.api.context.transformation.GenericNodeTransformation]].
  * Requires proper definition of outputVariableType.
  *
  * @tparam Raw - type of raw event that is generated by flink source function, see [[FlinkIntermediateRawSource]].
  * @tparam DefinedParameter - type of parameters used in the node, see [[pl.touk.nussknacker.engine.api.context.transformation.GenericNodeTransformation]].
  * @tparam State - type of generic transformation state, see [[pl.touk.nussknacker.engine.api.context.transformation.GenericNodeTransformation]].
  */
abstract class BasicFlinkGenericContextInitializer[Raw, DefinedParameter <: BaseDefinedParameter, State] extends BasicFlinkContextInitializer[Raw] with FlinkGenericContextInitializer[Raw, DefinedParameter, State] {

  /**
    * Enhances validation context with definition of all variables produced by the source.
    * Within basic scenario only "input" variable is initialized.
    *
    * @param context      - `ValidationContext` initialized with global variables, definition of variables available in `Context` scope and their types
    * @param dependencies - node dependencies
    * @param parameters   - parameters associated with final contextTransformation
    * @param state        - arbitrary data that can be passed between steps of NodeTransformationDefinition
    * @return - validation context with initialized "input" variable.
    */
  override def validationContext(context: ValidationContext, dependencies: List[NodeDependencyValue], parameters: List[(String, DefinedParameter)], state: Option[State])(implicit nodeId: NodeId): ValidationContext = {
    val outputVariableName = OutputVariableNameDependency.extract(dependencies)
    context.withVariable(outputVariableName, outputVariableType(context, dependencies, parameters, state), None).getOrElse(context)
  }

  /**
    * Within basic scenario it provides the information about the type of "input" variable.
    *
    * @return type of "input" variable.
    */
  protected def outputVariableType(context: ValidationContext, dependencies: List[NodeDependencyValue], parameters: List[(String, DefinedParameter)], state: Option[State])(implicit nodeId: NodeId): TypingResult
}

/**
  * Maps raw source event to Context where default "input" variable represents the event.
  *
  * @param processId - id of the process or flink job, used to setup name of created Context
  * @param taskName  - name of the task within the process or flink job, used to setup name of created Context
  * @tparam Raw - type of raw event that is generated by flink source function.
  */
case class BasicContextInitializingFunction[Raw](processId: String, taskName: String) extends RichMapFunction[Raw, Context] with ContextInitializingFunction {

  override def open(parameters: Configuration): Unit = {
    init(getRuntimeContext)
  }

  override def map(input: Raw): Context = newContext.withVariable(VariableConstants.InputVariableName, input)
}