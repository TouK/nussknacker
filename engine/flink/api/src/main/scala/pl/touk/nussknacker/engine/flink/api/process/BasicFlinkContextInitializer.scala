package pl.touk.nussknacker.engine.flink.api.process

import org.apache.flink.api.common.functions.{MapFunction, RichMapFunction}
import org.apache.flink.configuration.Configuration
import pl.touk.nussknacker.engine.api.{Context, VariableConstants}
import pl.touk.nussknacker.engine.api.context.ProcessCompilationError.NodeId
import pl.touk.nussknacker.engine.api.context.ValidationContext
import pl.touk.nussknacker.engine.api.typed.typing
import pl.touk.nussknacker.engine.flink.util.ContextInitializingFunction


/**
  * Basic context initializer. Used when raw event produced by SourceFunction does not need further transformations and
  * should be assigned to default "input" variable directly.
  *
  * @tparam Raw - type of raw event that is generated by flink source function.
  */
class BasicFlinkContextInitializer[Raw] extends FlinkContextInitializer[Raw] {

  override def validationContext(context: ValidationContext, outputVariableName: String, outputVariableType: typing.TypingResult)(implicit nodeId: NodeId): ValidationContext =
    context.withVariable(outputVariableName, outputVariableType, None).getOrElse(context)

  override def initContext(processId: String, taskName: String): MapFunction[Raw, Context] =
    new BasicContextInitializingFunction[Raw](processId, taskName)
}

/**
  * Maps raw source event to Context where default "input" variable represents the event.
  *
  * @param processId - id of the process or flink job, used to setup name of created Context
  * @param taskName - name of the task within the process or flink job, used to setup name of created Context
  * @tparam Raw - type of raw event that is generated by flink source function.
  */
case class BasicContextInitializingFunction[Raw](processId: String, taskName: String) extends RichMapFunction[Raw, Context] with ContextInitializingFunction {

  override def open(parameters: Configuration): Unit = {
    init(getRuntimeContext)
  }

  override def map(input: Raw): Context = newContext.withVariable(VariableConstants.InputVariableName, input)
}