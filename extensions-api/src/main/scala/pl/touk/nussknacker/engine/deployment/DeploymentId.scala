package pl.touk.nussknacker.engine.deployment

import io.circe.generic.extras.semiauto.{deriveUnwrappedDecoder, deriveUnwrappedEncoder}
import io.circe.{Decoder, Encoder}
import pl.touk.nussknacker.engine.api.deployment.ProcessActionId

import java.util.UUID
import scala.util.Try

//id generated by Nussknacker - in contrary to ExternalDeploymentId which is generated by e.g. Flink
final case class DeploymentId(value: String) extends AnyVal {
  override def toString: String              = value
  def toActionIdOpt: Option[ProcessActionId] = Try(UUID.fromString(value)).toOption.map(ProcessActionId(_))
}

object DeploymentId {
  implicit val encoder: Encoder[DeploymentId] = deriveUnwrappedEncoder
  implicit val decoder: Decoder[DeploymentId] = deriveUnwrappedDecoder

  def fromActionId(actionId: ProcessActionId): DeploymentId = DeploymentId(actionId.toString)

}
