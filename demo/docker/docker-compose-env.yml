version: '3.7'

services:
  influxdb:
    container_name: nussknacker_influxdb
    image: influxdb:${INFLUXDB_VERSION-1.7.10-alpine}
    environment:
      INFLUXDB_DB: esp
    volumes:
      - ./influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
      - nussknacker_storage_influxdb:/var/lib/influxdb

  telegraf:
    container_name: nussknacker_telegraf
    image: telegraf:${TELEGRAF_VERSION-1.14.1-alpine}
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf


  zookeeper:
    container_name: nussknacker_zookeeper
    image: zookeeper:${ZOOKEEPER_VERSION-3.5}
    environment:
      JVMFLAGS: "-Xms64m -Xmx128m"
    volumes:
      - nussknacker_storage_zookeeper_datalog:/datalog
      - nussknacker_storage_zookeeper_data:/data

  kafka:
    container_name: nussknacker_kafka
    image: ${KAFKA_REPOSITORY-wurstmeister/kafka}:${KAFKA_VERSION-2.12-2.3.0}
    ports:
      - "3032:9092"
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "processedEvents:1:1"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: -Xms128m -Xmx512m
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - nussknacker_storage_kafka_data:/kafka
    depends_on:
      - zookeeper

  akhq:
    container_name: nussknacker_akhq
    image: tchiotludo/akhq:${AKHQ_VERSION-0.15.0}
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            nussknacker:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schemaregistry:8081"
    ports:
      - 8085:8080
    links:
      - kafka
      - schemaregistry

  schemaregistry:
    container_name: nussknacker_schemaregistry
    image: confluent/schema-registry
    ports:
      - 3082:8081
    depends_on:
      - zookeeper
      - kafka
    #schema registry needs running kafka, depends_on is not enough, so let's restart when schema registry fails...
    restart: on-failure

  jobmanager:
    container_name: nussknacker_jobmanager
    image: flink:${FLINK_VERSION-1.10.2}-scala_${SCALA_VERSION-2.12}
    ports:
      - "3031:8081"
    entrypoint: /flink-entrypoint.sh
    command: jobmanager
    depends_on:
      - zookeeper
      - kafka
      - influxdb
    volumes:
      - ./flink/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
      - ./flink/flink-entrypoint.sh:/flink-entrypoint.sh
      - nussknacker_storage_jobmanager:/opt/flink/data

  taskmanager:
    container_name: nussknacker_taskmanager
    image: flink:${FLINK_VERSION-1.10.2}-scala_${SCALA_VERSION-2.12}
    ports:
      - "3063:9069"
    entrypoint: /flink-entrypoint.sh
    command: taskmanager
    depends_on:
      - zookeeper
      - kafka
      - jobmanager
      - influxdb
    volumes:
      - ./flink/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
      - ./flink/flink-entrypoint.sh:/flink-entrypoint.sh
      - nussknacker_storage_taskmanager:/opt/flink/data
    ulimits:
      nproc: 70000
      nofile:
        soft: 70000
        hard: 70000

  elasticsearch:
    container_name: nussknacker_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION-7.6.1}
    environment:
      cluster.name: "elk-nussknacker"
      network.host: "0.0.0.0"
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      xpack.monitoring.enabled: "false"
      xpack.ml.enabled: "false"
      xpack.graph.enabled: "false"
      xpack.watcher.enabled: "false"
      ES_JAVA_OPTS: -Xms128m -Xmx256m
    volumes:
      - nussknacker_storage_elasticsearch_data:/usr/share/elasticsearch/data
    ulimits:
      nproc: 70000
      nofile:
        soft: 70000
        hard: 70000

  logstash:
    container_name: nussknacker_logstash
    image: docker.elastic.co/logstash/logstash:${LOGSTASH_VERSION-7.6.1}
    depends_on:
      - elasticsearch
      - kafka
    environment:
      XPACK_MONITORING_ENABLED: "false"
      LS_JAVA_OPTS: "-Xms128m -Xmx256m"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/templates:/usr/share/logstash/templates
      - nussknacker_storage_logstash_data:/usr/share/logstash/data

  kibana:
    container_name: nussknacker_kibana
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION-7.6.1}
    depends_on:
      - elasticsearch
    volumes:
      - ./kibana/config/:/usr/share/kibana/config

  grafana:
    container_name: nussknacker_grafana
    image: grafana/grafana:${GRAFANA_VERSION-6.6.2}
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:/grafana
      - GF_SECURITY_ALLOW_EMBEDDING=true
    depends_on:
      - influxdb

  nginx:
    container_name: nussknacker_nginx
    image: nginx:${NGINX_VERSION-1.17.6}
    ports:
      - "8081:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    restart: on-failure
    depends_on:
      - zookeeper
      - influxdb
      - kafka
      - jobmanager
      - taskmanager
      - elasticsearch
      - logstash
      - kibana
      - grafana


volumes:
  nussknacker_storage_zookeeper_datalog:
  nussknacker_storage_zookeeper_data:
  nussknacker_storage_elasticsearch_data:
  nussknacker_storage_logstash_data:
  nussknacker_storage_kafka_data:
  nussknacker_storage_taskmanager:
  nussknacker_storage_jobmanager:
  nussknacker_storage_influxdb:
