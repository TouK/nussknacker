{
  "metaData" : {
    "id" : "DetectLargeTransactions",
    "typeSpecificData" : {
      "type" : "StreamMetaData",
      "parallelism" : 2
    },
    "additionalFields" : {
      
    }
  },
  "exceptionHandlerRef" : {
    "parameters" : [
    ]
  },
  "nodes" : [
    {
      "type" : "Source",
      "id" : "transactions",
      "ref" : {
        "typ" : "kafka-transaction",
        "parameters" : [
          {
            "name" : "topic",
            "expression" : {
              "language" : "spel",
              "expression" : "'transactions'"
            }
          }
        ]
      }
    },
    {
      "type" : "Split",
      "id" : "split",
      "nexts" : [
        [
          {
            "type" : "Filter",
            "id" : "only large ones",
            "expression" : {
              "language" : "spel",
              "expression" : "#input.amount > 20"
            },
            "nextFalse" : []
          },
          {
            "type" : "Sink",
            "id" : "save to kafka",
            "ref" : {
              "typ" : "kafka-stringSink",
              "parameters" : [
                {
                  "name" : "topic",
                  "expression" : {
                    "language" : "spel",
                    "expression" : "'processedEvents'"
                  }
                }
              ]
            },
            "endResult" : {
              "language" : "spel",
              "expression" : "#input"
            }
          }
        ],
        [
          {
            "type" : "CustomNode",
            "id" : "amount aggregation",
            "outputVar" : "aggregated",
            "nodeType" : "transactionAmountAggregator",
            "parameters" : [
              {
                "name" : "clientId",
                "expression" : {
                  "language" : "spel",
                  "expression" : "#input.clientId"
                }
              }
            ]
          },
          {
            "type" : "Filter",
            "id" : "filter large amount",
            "expression" : {
              "language" : "spel",
              "expression" : "#aggregated.amount > 30"
            },
            "nextFalse" : []
          },
          {
            "type" : "Processor",
            "id" : "alert",
            "service" : {
              "id" : "alertService",
              "parameters" : [
                {
                  "name" : "message",
                  "expression" : {
                    "language" : "spel",
                    "expression" : "'Client: ' + #input.clientId + ' has exceeded limit, total amount: ' + #aggregated.amount"
                  }
                },
                {
                  "name" : "category",
                  "expression" : {
                    "language" : "spel",
                    "expression" : "'alert'"
                  }
                }
              ]
            }
          }
        ]
      ]
    }
  ]
}
