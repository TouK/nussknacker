/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pl.touk.nussknacker.engine.types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GeneratedAvroClass extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 7672489327792131691L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeneratedAvroClass\",\"namespace\":\"pl.touk.nussknacker.engine.types.GeneratedAvroClass\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<GeneratedAvroClass> ENCODER =
            new BinaryMessageEncoder<GeneratedAvroClass>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<GeneratedAvroClass> DECODER =
            new BinaryMessageDecoder<GeneratedAvroClass>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<GeneratedAvroClass> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<GeneratedAvroClass> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<GeneratedAvroClass>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this GeneratedAvroClass to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a GeneratedAvroClass from a ByteBuffer. */
    public static GeneratedAvroClass fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated public java.lang.CharSequence text;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public GeneratedAvroClass() {}

    /**
     * All-args constructor.
     * @param text The new value for text
     */
    public GeneratedAvroClass(java.lang.CharSequence text) {
        this.text = text;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return text;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: text = (java.lang.CharSequence)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'text' field.
     * @return The value of the 'text' field.
     */
    public java.lang.CharSequence getText() {
        return text;
    }

    /**
     * Sets the value of the 'text' field.
     * @param value the value to set.
     */
    public void setText(java.lang.CharSequence value) {
        this.text = value;
    }

    /**
     * Creates a new GeneratedAvroClass RecordBuilder.
     * @return A new GeneratedAvroClass RecordBuilder
     */
    public static pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder newBuilder() {
        return new pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder();
    }

    /**
     * Creates a new GeneratedAvroClass RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new GeneratedAvroClass RecordBuilder
     */
    public static pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder newBuilder(pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder other) {
        return new pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder(other);
    }

    /**
     * Creates a new GeneratedAvroClass RecordBuilder by copying an existing GeneratedAvroClass instance.
     * @param other The existing instance to copy.
     * @return A new GeneratedAvroClass RecordBuilder
     */
    public static pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder newBuilder(pl.touk.nussknacker.engine.types.GeneratedAvroClass other) {
        return new pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder(other);
    }

    /**
     * RecordBuilder for GeneratedAvroClass instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeneratedAvroClass>
            implements org.apache.avro.data.RecordBuilder<GeneratedAvroClass> {

        private java.lang.CharSequence text;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.text)) {
                this.text = data().deepCopy(fields()[0].schema(), other.text);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing GeneratedAvroClass instance
         * @param other The existing instance to copy.
         */
        private Builder(pl.touk.nussknacker.engine.types.GeneratedAvroClass other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.text)) {
                this.text = data().deepCopy(fields()[0].schema(), other.text);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Gets the value of the 'text' field.
         * @return The value.
         */
        public java.lang.CharSequence getText() {
            return text;
        }

        /**
         * Sets the value of the 'text' field.
         * @param value The value of 'text'.
         * @return This builder.
         */
        public pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder setText(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.text = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'text' field has been set.
         * @return True if the 'text' field has been set, false otherwise.
         */
        public boolean hasText() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'text' field.
         * @return This builder.
         */
        public pl.touk.nussknacker.engine.types.GeneratedAvroClass.Builder clearText() {
            text = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public GeneratedAvroClass build() {
            try {
                GeneratedAvroClass record = new GeneratedAvroClass();
                record.text = fieldSetFlags()[0] ? this.text : (java.lang.CharSequence) defaultValue(fields()[0]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<GeneratedAvroClass>
            WRITER$ = (org.apache.avro.io.DatumWriter<GeneratedAvroClass>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<GeneratedAvroClass>
            READER$ = (org.apache.avro.io.DatumReader<GeneratedAvroClass>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
