openapi: 3.1.0
info:
  title: Nussknacker Designer API
  version: ''
paths:
  /api/components/{id}/usages:
    get:
      tags:
      - Components
      summary: Show component usage
      operationId: getApiComponentsIdUsages
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentUsagesInScenario'
              examples:
                Example0:
                  summary: List component usages
                  value:
                  - name: scenario1
                    nodesUsagesData:
                    - nodeId: csv-source
                      type: ScenarioUsageData
                    isFragment: false
                    processCategory: Category1
                    modificationDate: '2023-11-29T08:54:22.520866Z'
                    modifiedAt: '2023-11-29T08:54:22.520866Z'
                    modifiedBy: admin
                    createdAt: '2023-11-14T11:09:28.078800Z'
                    createdBy: admin
                    lastAction:
                      id: 45c0f3f5-3ef7-4dc2-92d4-8bb826ec0ca9
                      processId: 1
                      processVersionId: 1
                      user: admin
                      createdAt: '2023-11-29T08:54:22.520866Z'
                      performedAt: '2023-11-29T08:54:22.520866Z'
                      actionName: DEPLOY
                      state: FINISHED
                      buildInfo: {}
                Example1:
                  summary: List component usages with no last Action
                  value:
                  - name: scenario1
                    nodesUsagesData:
                    - nodeId: csv-source
                      type: ScenarioUsageData
                    isFragment: false
                    processCategory: Category1
                    modificationDate: '2023-11-29T08:54:22.520866Z'
                    modifiedAt: '2023-11-29T08:54:22.520866Z'
                    modifiedBy: admin
                    createdAt: '2023-11-14T11:09:28.078800Z'
                    createdBy: admin
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              example: Component {id} not exist.
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/components:
    get:
      tags:
      - Components
      summary: Listing components
      operationId: getApiComponents
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: skipUsages
        in: query
        required: false
        schema:
          type:
          - boolean
          - 'null'
      - name: skipFragments
        in: query
        required: false
        schema:
          type:
          - boolean
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentListElement'
              examples:
                Example:
                  summary: List of available components
                  value:
                  - id: request-response-embedded-customnode-collect
                    name: collect
                    icon: /assets/components/CustomNode.svg
                    componentType: custom
                    componentGroupName: custom
                    categories:
                    - RequestResponse
                    links:
                    - id: documentation
                      title: Documentation
                      icon: /assets/icons/documentation.svg
                      url: https://nussknacker.io/documentation/docs/scenarios_authoring/RRDataSourcesAndSinks/#collect
                    usageCount: 2
                    allowedProcessingModes:
                    - Request-Response
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: query parameter skipUsages, Invalid value for: query parameter
            skipFragments'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/actionInfo/{scenarioName}/parameters:
    get:
      tags:
      - Deployments
      summary: Get action parameters
      operationId: getApiActioninfoScenarionameParameters
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
              examples:
                Example:
                  summary: Valid action parameters for given scenario
                  value:
                    DEPLOY:
                    - nodeId: sample node id
                      parameters:
                        param name:
                          editor:
                            type: RawParameterEditor
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/app/healthCheck:
    get:
      tags:
      - App
      summary: Application health check service
      operationId: getApiAppHealthcheck
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckProcessSuccessResponseDto'
              examples:
                Example:
                  summary: Application is healthy
                  value:
                    status: OK
  /api/app/buildInfo:
    get:
      tags:
      - App
      summary: Application info service
      operationId: getApiAppBuildinfo
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildInfoDto'
              examples:
                Example:
                  summary: Application build info response
                  value:
                    name: nussknacker
                    version: 1.234.0
                    buildTime: '2023-09-25T09:26:30.402299'
                    gitCommit: d4e42ee5c594ffe70a37faca3579eb535dac9820
                    processingType:
                      streaming:
                        process-version: '0.1'
                        engine-version: '0.2'
                        generation-time: '2023-09-25T09:26:30.402299'
  /api/app/healthCheck/process/deployment:
    get:
      tags:
      - App
      summary: Deployed processes health check service
      operationId: getApiAppHealthcheckProcessDeployment
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckProcessSuccessResponseDto'
              examples:
                Example:
                  summary: All deployed processes are healthy
                  value:
                    status: OK
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckProcessErrorResponseDto'
              examples:
                Example:
                  summary: Some processes are unhealthy
                  value:
                    status: ERROR
                    message: Scenarios with status PROBLEM
                    processes:
                    - process1
                    - process2
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/app/healthCheck/process/validation:
    get:
      tags:
      - App
      summary: Deployed processes validation service
      operationId: getApiAppHealthcheckProcessValidation
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckProcessSuccessResponseDto'
              examples:
                Example:
                  summary: There are no validation errors among the processes
                  value:
                    status: OK
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckProcessErrorResponseDto'
              examples:
                Example:
                  summary: Some processes have validation errors
                  value:
                    status: ERROR
                    message: Scenarios with validation errors
                    processes:
                    - process2
                    - process3
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/app/processingtype/reload:
    post:
      tags:
      - App
      summary: Processing type data reload service
      operationId: postApiAppProcessingtypeReload
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '204':
          description: ''
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/app/config:
    get:
      tags:
      - App
      summary: Server configuration viewer service
      operationId: getApiAppConfig
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
              examples:
                Example:
                  summary: Server configuration response
                  value:
                    environment: local
                    scenarioTypes:
                      development-tests:
                        type: development-tests
                      modelConfig:
                        classPath:
                        - model/devModel.jar
                        - model/flinkExecutor.jar
                        - components/flink
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/app/config/categoriesWithProcessingType:
    get:
      tags:
      - App
      summary: Configured categories with their processing types service
      operationId: getApiAppConfigCategorieswithprocessingtype
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_String'
              examples:
                Example:
                  summary: Configured categories and their processing types
                  value:
                    Category1: streaming
                    Category2: streaming2
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/deployments/{deploymentId}/status:
    get:
      tags:
      - Deployments
      summary: Get status of a deployment
      operationId: getApiDeploymentsDeploymentidStatus
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: deploymentId
        in: path
        description: Identifier in the UUID format that will be used for the verification
          of deployment's status
        required: true
        schema:
          type: string
          format: uuid
        example: a9a1e269-0b71-4582-a948-603482d27298
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentStatusResponse'
              examples:
                RUNNING status:
                  value:
                    name: RUNNING
                    modifiedAt: '2024-01-01T00:00:00Z'
                PROBLEM status:
                  value:
                    name: PROBLEM
                    problemDescription: There are some problems with deployment.
                    modifiedAt: '2024-01-01T00:00:00Z'
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: path parameter deploymentId'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No deployment {deploymentId} found
                  value: Deployment a9a1e269-0b71-4582-a948-603482d27298 not found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/deployments/{deploymentId}:
    put:
      tags:
      - Deployments
      summary: Run the deployment of a scenario
      operationId: putApiDeploymentsDeploymentid
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: deploymentId
        in: path
        description: Identifier in the UUID format that will be used for the verification
          of deployment's status
        required: true
        schema:
          type: string
          format: uuid
        example: a9a1e269-0b71-4582-a948-603482d27298
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunDeploymentRequest'
            example:
              scenarioName: scenario1
              nodesDeploymentData:
                sourceNodeId1: field1 = 'value'
        required: true
      responses:
        '202':
          description: ''
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example0:
                  summary: Scenario {scenarioName} not found
                  value: Scenario 'example scenario' not found
                Example1:
                  summary: Comment is required
                  value: Comment is required.
                Example2:
                  summary: Scenario validation error
                  value: |-
                    Scenario is invalid.
                    Node errors:
                      filter: Failed to parse expression: Bad expression
                    Global errors: Empty scenario
                    Properties errors: Configured property parallelism is missing
                Example3:
                  summary: Deploy validation error
                  value: Not enough free slots on Flink cluster
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '409':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Deployment with id {deploymentId} already exists
                  value: Deployment with id a9a1e269-0b71-4582-a948-603482d27298 already
                    exists
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processDefinitionData/{processingType}/dicts/{dictId}/entry:
    get:
      tags:
      - Dictionary
      summary: Get list of dictionary entries matching the label pattern
      operationId: getApiProcessdefinitiondataProcessingtypeDictsDictidEntry
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: processingType
        in: path
        required: true
        schema:
          type: string
      - name: dictId
        in: path
        required: true
        schema:
          type: string
      - name: label
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DictEntry'
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: query parameter label'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processDefinitionData/{processingType}/dicts:
    post:
      tags:
      - Dictionary
      summary: Get list of available dictionaries with value type compatible with
        expected type
      operationId: postApiProcessdefinitiondataProcessingtypeDicts
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: processingType
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DictListRequestDto'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DictDto'
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/migrate:
    post:
      tags:
      - Migrations
      summary: Migration between environments service
      operationId: postApiMigrate
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrateScenarioRequestDto'
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
                - type: string
              examples:
                Example:
                  summary: Attempt to migrate scenario which is already archived
                  value: Cannot migrate, scenario process1 is archived on test. You
                    have to unarchive scenario on test in order to migrate.
        '401':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
                Example:
                  summary: Migration performed by user without sufficient permissions
                  value: The supplied user [Griffin] is not authorized to access this
                    resource
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/migration/scenario/description/version:
    get:
      tags:
      - Migrations
      summary: current version of the scenario description version being used
      operationId: getApiMigrationScenarioDescriptionVersion
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiVersion'
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/nodes/{scenarioName}/additionalInfo:
    post:
      tags:
      - Nodes
      summary: Additional info for provided node
      operationId: postApiNodesScenarionameAdditionalinfo
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeData'
            examples:
              Example:
                summary: Basic node request
                value:
                  id: enricher
                  service:
                    id: paramService
                    parameters:
                    - name: id
                      expression:
                        language: spel
                        expression: '''a'''
                  output: out
                  type: Enricher
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/AdditionalInfo'
                - type: 'null'
              examples:
                Example:
                  summary: Additional info for node
                  value:
                    content: |2

                      Samples:

                      | id  | value |
                      | --- | ----- |
                      | a   | generated |
                      | b   | not existent |

                      Results for a can be found [here](http://touk.pl?id=a)
                    type: MarkdownAdditionalInfo
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/nodes/{scenarioName}/validation:
    post:
      tags:
      - Nodes
      summary: Validate provided Node
      operationId: postApiNodesScenarionameValidation
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeValidationRequestDto'
            examples:
              Example0:
                summary: Validate correct Filter node
                value:
                  nodeData:
                    id: id
                    expression:
                      language: spel
                      expression: '#longValue > 1'
                    type: Filter
                  processProperties:
                    additionalFields:
                      properties: {}
                      metaDataType: ''
                      showDescription: false
                  variableTypes:
                    existButString:
                      display: String
                      type: TypedClass
                      refClazzName: java.lang.String
                      params: []
                    longValue:
                      display: Long
                      type: TypedClass
                      refClazzName: java.lang.Long
                      params: []
              Example1:
                summary: Validate incorrect Filter node - wrong expression type
                value:
                  nodeData:
                    id: id
                    expression:
                      language: spel
                      expression: '#existButString'
                    type: Filter
                  processProperties:
                    additionalFields:
                      properties: {}
                      metaDataType: ''
                      showDescription: false
                  variableTypes:
                    existButString:
                      display: String
                      type: TypedClass
                      refClazzName: java.lang.String
                      params: []
                    longValue:
                      display: Long
                      type: TypedClass
                      refClazzName: java.lang.Long
                      params: []
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeValidationResultDto'
              examples:
                Example0:
                  summary: Node validation without errors
                  value:
                    expressionType:
                      display: Boolean
                      type: TypedClass
                      refClazzName: java.lang.Boolean
                      params: []
                    validationErrors: []
                    validationPerformed: true
                Example1:
                  summary: Wrong parameter type
                  value:
                    expressionType:
                      display: Unknown
                      type: Unknown
                      refClazzName: java.lang.Object
                      params: []
                    validationErrors:
                    - typ: ExpressionParserCompilationError
                      message: 'Failed to parse expression: Bad expression type, expected:
                        Boolean, found: String'
                      description: There is problem with expression in field Some($expression)
                        - it could not be parsed.
                      fieldName: $expression
                      errorType: SaveAllowed
                    validationPerformed: true
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Malformed TypingResult sent in request
                  value: |-
                    The request content was malformed:
                    Couldn't decode value 'WrongType'. Allowed values: 'TypedUnion,TypedDict,TypedObjectTypingResult,TypedTaggedValue,TypedClass,TypedObjectWithValue,TypedNull,Unknown
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/parameters/{processingType}/suggestions:
    post:
      tags:
      - Nodes
      summary: Suggest possible variables
      operationId: postApiParametersProcessingtypeSuggestions
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: processingType
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionSuggestionRequestDto'
            examples:
              Example:
                summary: Get suggestions for given expression
                value:
                  expression:
                    language: spel
                    expression: '#inpu'
                  caretPosition2d:
                    row: 0
                    column: 5
                  variableTypes:
                    input:
                      display: 'Record{amount: Long(5)}'
                      type: TypedObjectTypingResult
                      fields:
                        amount:
                          value: 5
                          display: Long(5)
                          type: TypedObjectWithValue
                          refClazzName: java.lang.Long
                          params: []
                      refClazzName: java.util.Map
                      params:
                      - display: String
                        type: TypedClass
                        refClazzName: java.lang.String
                        params: []
                      - value: 5
                        display: Long(5)
                        type: TypedObjectWithValue
                        refClazzName: java.lang.Long
                        params: []
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpressionSuggestionDto'
              examples:
                Example0:
                  summary: Found a suggestion for currently given expression
                  value:
                  - methodName: input
                    refClazz:
                      display: 'Record{amount: Long(5)}'
                      type: TypedObjectTypingResult
                      fields:
                        amount:
                          value: 5
                          display: Long(5)
                          type: TypedObjectWithValue
                          refClazzName: java.lang.Long
                          params: []
                      refClazzName: java.util.Map
                      params:
                      - display: String
                        type: TypedClass
                        refClazzName: java.lang.String
                        params: []
                      - value: 5
                        display: Long(5)
                        type: TypedObjectWithValue
                        refClazzName: java.lang.Long
                        params: []
                    fromClass: false
                    parameters: []
                Example1:
                  summary: No suggestions found for given expression
                  value: []
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Malformed TypingResult sent in request
                  value: |-
                    The request content was malformed:
                    Couldn't decode value 'WrongType'. Allowed values: 'TypedUnion,TypedDict,TypedObjectTypingResult,TypedTaggedValue,TypedClass,TypedObjectWithValue,TypedNull,Unknown
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: 'ProcessingType type: {processingType} not found'
                  value: 'ProcessingType type: ''processingType'' not found'
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/parameters/{processingType}/validate:
    post:
      tags:
      - Nodes
      summary: Validate given parameters
      operationId: postApiParametersProcessingtypeValidate
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: processingType
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParametersValidationRequestDto'
            examples:
              Example:
                summary: Parameters validation
                value:
                  parameters:
                  - name: condition
                    typ:
                      display: Boolean
                      type: TypedClass
                      refClazzName: java.lang.Boolean
                      params: []
                    expression:
                      language: spel
                      expression: '#input.amount > 2'
                  variableTypes:
                    input:
                      display: 'Record{amount: Long(5)}'
                      type: TypedObjectTypingResult
                      fields:
                        amount:
                          value: 5
                          display: Long(5)
                          type: TypedObjectWithValue
                          refClazzName: java.lang.Long
                          params: []
                      refClazzName: java.util.Map
                      params:
                      - display: String
                        type: TypedClass
                        refClazzName: java.lang.String
                        params: []
                      - value: 5
                        display: Long(5)
                        type: TypedObjectWithValue
                        refClazzName: java.lang.Long
                        params: []
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParametersValidationResultDto'
              examples:
                Example0:
                  summary: Validate correct parameters
                  value:
                    validationErrors: []
                    validationPerformed: true
                Example1:
                  summary: Validate incorrect parameters
                  value:
                    validationErrors:
                    - typ: ExpressionParserCompilationError
                      message: 'Failed to parse expression: Bad expression type, expected:
                        Boolean, found: Long(5)'
                      description: There is problem with expression in field Some(condition)
                        - it could not be parsed.
                      fieldName: condition
                      errorType: SaveAllowed
                    validationPerformed: true
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Malformed TypingResult sent in request
                  value: |-
                    The request content was malformed:
                    Couldn't decode value 'WrongType'. Allowed values: 'TypedUnion,TypedDict,TypedObjectTypingResult,TypedTaggedValue,TypedClass,TypedObjectWithValue,TypedNull,Unknown
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: 'ProcessingType type: {processingType} not found'
                  value: 'ProcessingType type: ''processingType'' not found'
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/properties/{scenarioName}/additionalInfo:
    post:
      tags:
      - Nodes
      summary: Additional info for provided properties
      operationId: postApiPropertiesScenarionameAdditionalinfo
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/AdditionalInfo'
                - type: 'null'
              examples:
                Example:
                  summary: Some additional info for parameters
                  value:
                    content: 2 threads will be used on environment '{scenarioName}'
                    type: MarkdownAdditionalInfo
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/properties/{scenarioName}/validation:
    post:
      tags:
      - Nodes
      summary: Validate node properties
      operationId: postApiPropertiesScenarionameValidation
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertiesValidationRequestDto'
            examples:
              Example0:
                summary: Validate proper properties
                value:
                  additionalFields:
                    properties:
                      parallelism: ''
                      checkpointIntervalInSeconds: ''
                      numberOfThreads: '2'
                      spillStateToDisk: 'true'
                      environment: test
                      useAsyncInterpretation: ''
                    metaDataType: StreamMetaData
                    showDescription: false
                  name: test
              Example1:
                summary: Validate wrong 'number of threads' property
                value:
                  additionalFields:
                    properties:
                      parallelism: ''
                      checkpointIntervalInSeconds: ''
                      numberOfThreads: a
                      spillStateToDisk: 'true'
                      environment: test
                      useAsyncInterpretation: ''
                    metaDataType: StreamMetaData
                    showDescription: false
                  name: test
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeValidationResultDto'
              examples:
                Example0:
                  summary: Validation for proper node
                  value:
                    validationErrors: []
                    validationPerformed: true
                Example1:
                  summary: Validation for properties with errors
                  value:
                    validationErrors:
                    - typ: InvalidPropertyFixedValue
                      message: Property numberOfThreads (Number of threads) has invalid
                        value
                      description: 'Expected one of 1, 2, got: a.'
                      fieldName: numberOfThreads
                      errorType: SaveAllowed
                    - typ: UnknownProperty
                      message: Unknown property parallelism
                      description: Property parallelism is not known
                      fieldName: parallelism
                      errorType: SaveAllowed
                    validationPerformed: true
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/nodes/{scenarioName}/records:
    post:
      tags:
      - Nodes
      summary: Fetch records for specific node
      operationId: postApiNodesScenarionameRecords
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of records returned
        required: false
        schema:
          default: 10
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordsRequestDto'
            examples:
              Example:
                summary: Basic fetch request
                value:
                  processProperties:
                    additionalFields:
                      properties:
                        parallelism: ''
                        spillStateToDisk: 'true'
                        useAsyncInterpretation: ''
                        checkpointIntervalInSeconds: ''
                      metaDataType: StreamMetaData
                      showDescription: false
                  nodeData:
                    id: sourceId
                    ref:
                      typ: source
                      parameters: []
                    type: Source
        required: true
      responses:
        '200':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Simple scenario test data in json stringify form
                  value: '{name: John}'
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example0:
                  summary: Source compilation error
                  value: 'Cannot compile source ''sourceId''. Errors: Invalid source
                    configuration'
                Example1:
                  summary: Unsupported source preview
                  value: Source 'sourceId' doesn't support records preview
                Example2:
                  summary: Invalid node type
                  value: 'Expected Filter but got: Source'
                Example3:
                  summary: Too many samples requested
                  value: Too many samples requested, limit is 100
                Example4:
                  summary: Serialization error
                  value: 'Error during serialization: Failed to serialize test data'
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example0:
                  summary: No scenario found
                  value: No scenario 'example scenario' found
                Example1:
                  summary: No test data generated
                  value: No test data was generated
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/notifications:
    get:
      tags:
      - Notifications
      summary: Endpoint to display notifications
      operationId: getApiNotifications
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: query
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
              examples:
                Example:
                  summary: Display simple deployment notification
                  value:
                  - id: 0351c45a-2c4c-4ffd-8848-ae6c2f281ef1
                    scenarioName: scenario1
                    message: Deployment finished
                    toRefresh:
                    - activity
                    - state
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: query parameter scenarioName'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/scenarioLabels:
    get:
      tags:
      - Scenario labels
      summary: Service providing available scenario labels
      operationId: getApiScenariolabels
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioLabels'
              examples:
                Example:
                  summary: List of available scenario labels
                  value:
                    labels:
                    - Label_1
                    - Label_2
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/scenarioLabels/validation:
    post:
      tags:
      - Scenario labels
      summary: Service providing scenario labels validation
      operationId: postApiScenariolabelsValidation
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioLabelsValidationRequestDto'
            examples:
              Example0:
                summary: List of valid scenario labels
                value:
                  labels:
                  - Label_1
                  - Label_2
              Example1:
                summary: List of scenario labels with invalid one
                value:
                  labels:
                  - Label_1
                  - Label_2
                  - Label 3
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioLabelsValidationResponseDto'
              examples:
                Example0:
                  summary: Validation response with no errors
                  value:
                    validationErrors: []
                Example1:
                  summary: Validation response with errors
                  value:
                    validationErrors:
                    - label: Label 3
                      messages:
                      - Scenario label can contain only alphanumeric characters, '-'
                        and '_'
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/scenarioParametersCombinations:
    get:
      tags:
      - App
      summary: Service providing available combinations of scenario's parameters
      operationId: getApiScenarioparameterscombinations
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioParametersCombinationWithEngineErrors'
              examples:
                Example:
                  summary: List of available parameters combinations
                  value:
                    combinations:
                    - processingMode: Unbounded-Stream
                      category: Marketing
                      engineSetupName: Flink
                    - processingMode: Request-Response
                      category: Fraud
                      engineSetupName: Lite K8s
                    - processingMode: Unbounded-Stream
                      category: Fraud
                      engineSetupName: Flink Fraud Detection
                    engineSetupErrors:
                      Flink:
                      - Invalid Flink configuration
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/statistic:
    post:
      tags:
      - Statistics
      summary: Register statistics service
      operationId: postApiStatistic
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterStatisticsRequestDto'
        required: true
      responses:
        '204':
          description: ''
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/statistic/usage:
    get:
      tags:
      - Statistics
      summary: Statistics URL service
      operationId: getApiStatisticUsage
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticUrlResponseDto'
              examples:
                Example:
                  summary: List of statistics URLs
                  value:
                    urls:
                    - https://stats.nussknacker.io/?a_n=1&a_t=0&a_v=0&c=3&c_n=82&c_t=0&c_v=0&f_m=0&f_v=0&fingerprint=development&n_m=2&n_ma=0&n_mi=2&n_v=1&s_a=0&s_dm_c=1&s_dm_e=1&s_dm_f=2&s_dm_l=0&s_f=1&s_pm_b=0&s_pm_rr=1&s_pm_s=3&s_s=3&source=sources&u_ma=0&u_mi=0&u_v=0&v_m=2&v_ma=1&v_mi=3&v_v=2&version=1.15.0-SNAPSHOT
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '500':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Statistics generation failed.
                  value: Statistics generation failed.
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/stickyNotes:
    get:
      tags:
      - StickyNotes
      summary: Returns sticky nodes for given scenario with version
      operationId: getApiProcessesScenarionameStickynotes
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: scenarioVersionId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StickyNote'
              examples:
                Example:
                  summary: List of valid sticky notes returned for scenario
                  value:
                  - noteId: 1
                    content: "##Title \nNote1"
                    layoutData:
                      x: 20
                      y: 30
                    color: '#99aa20'
                    dimensions:
                      width: 300
                      height: 200
                    editedBy: Marco
                    editedAt: '1970-01-21T00:35:36.602Z'
                  - noteId: 2
                    content: "##Title \nNote1"
                    layoutData:
                      x: 20
                      y: 30
                    color: '#99aa20'
                    dimensions:
                      width: 300
                      height: 200
                    editedBy: Marco
                    editedAt: '1970-01-21T00:35:36.602Z'
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: query parameter scenarioVersionId'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario s1 found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
    put:
      tags:
      - StickyNotes
      summary: Updates sticky note with new values
      operationId: putApiProcessesScenarionameStickynotes
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StickyNoteUpdateRequest'
            example:
              noteId: 1
              scenarioVersionId: 1
              content: ''
              layoutData:
                x: 12
                y: 33
              color: '#441022'
              dimensions:
                width: 300
                height: 200
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Provided note content is too long (5004 characters). Max
                    content length is 5000.
                  value: Provided note content is too long (5004 characters). Max
                    content length is 5000.
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
              examples:
                Example:
                  summary: 'No sticky note with id: 3 was found'
                  value: 'No sticky note with id: StickyNoteId(3) was found'
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
    post:
      tags:
      - StickyNotes
      summary: Creates new sticky note with given content
      operationId: postApiProcessesScenarionameStickynotes
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StickyNoteAddRequest'
            example:
              scenarioVersionId: 1
              content: ''
              layoutData:
                x: 12
                y: 33
              color: '#441022'
              dimensions:
                width: 300
                height: 200
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                format: uuid
        '400':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
              examples:
                Example:
                  summary: 'Cannot add another sticky note, since max number of sticky
                    notes was reached: 5 (see configuration).'
                  value: 'Cannot add another sticky note, since max number of sticky
                    notes was reached: 5 (see configuration).'
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario s1 found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/stickyNotes/{noteId}:
    delete:
      tags:
      - StickyNotes
      summary: Deletes stickyNote by given noteId
      operationId: deleteApiProcessesScenarionameStickynotesNoteid
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: noteId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: ''
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: path parameter noteId'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario s1 found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/scenarioTesting/{scenarioName}/adhoc/validate:
    post:
      tags:
      - Testing
      summary: Validate adhoc parameters
      operationId: postApiScenariotestingScenarionameAdhocValidate
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdhocTestParametersRequest'
            examples:
              Example:
                summary: Valid example of minimalistic request
                value:
                  sourceParameters:
                    sourceId: source
                    parameterExpressions:
                      name:
                        language: spel
                        expression: '''Amadeus'''
                  scenarioGraph:
                    properties:
                      additionalFields:
                        properties:
                          parallelism: ''
                          spillStateToDisk: 'true'
                          useAsyncInterpretation: ''
                          checkpointIntervalInSeconds: ''
                        metaDataType: StreamMetaData
                        showDescription: false
                    nodes: []
                    edges: []
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParametersValidationResultDto'
              examples:
                Example0:
                  summary: Validate correct parameters
                  value:
                    validationErrors: []
                    validationPerformed: true
                Example1:
                  summary: Validate incorrect parameters
                  value:
                    validationErrors:
                    - typ: ExpressionParserCompilationError
                      message: 'Failed to parse expression: Bad expression type, expected:
                        Boolean, found: Long(5)'
                      description: There is problem with expression in field Some(condition)
                        - it could not be parsed.
                      fieldName: condition
                      errorType: SaveAllowed
                    validationPerformed: true
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Malformed TypingResult sent in request
                  value: |-
                    The request content was malformed:
                    Couldn't decode value 'WrongType'. Allowed values: 'TypedUnion,TypedDict,TypedObjectTypingResult,TypedTaggedValue,TypedClass,TypedObjectWithValue,TypedNull,Unknown
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/scenarioTesting/{scenarioName}/capabilities:
    post:
      tags:
      - Testing
      summary: Describes available testing actions
      operationId: postApiScenariotestingScenarionameCapabilities
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              properties:
                additionalFields:
                  properties:
                    parallelism: ''
                    spillStateToDisk: 'true'
                    useAsyncInterpretation: ''
                    checkpointIntervalInSeconds: ''
                  metaDataType: StreamMetaData
                  showDescription: false
              nodes: []
              edges: []
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestingCapabilities'
              examples:
                Example:
                  summary: Valid TestingCapabilities for given scenario
                  value:
                    canBeTested: false
                    canGenerateTestData: false
                    canTestWithForm: false
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/scenarioTesting/{scenarioName}/generate/{testSampleSize}:
    post:
      tags:
      - Testing
      summary: Generate testing data for scenario
      operationId: postApiScenariotestingScenarionameGenerateTestsamplesize
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: testSampleSize
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              properties:
                additionalFields:
                  properties:
                    parallelism: ''
                    spillStateToDisk: 'true'
                    useAsyncInterpretation: ''
                    checkpointIntervalInSeconds: ''
                  metaDataType: StreamMetaData
                  showDescription: false
              nodes: []
              edges: []
        required: true
      responses:
        '200':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Simple scenario test data in json stringify form
                  value: '{name: John}'
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: There was a problem with parsing test data
                  value: "Error during generation of test data: \nParsing of data\
                    \ failed"
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/scenarioTesting/{scenarioName}/parameters:
    post:
      tags:
      - Testing
      summary: Prepare scenario input parameters
      operationId: postApiScenariotestingScenarionameParameters
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              properties:
                additionalFields:
                  properties:
                    parallelism: ''
                    spillStateToDisk: 'true'
                    useAsyncInterpretation: ''
                    checkpointIntervalInSeconds: ''
                  metaDataType: StreamMetaData
                  showDescription: false
              nodes: []
              edges: []
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                Example:
                  summary: Valid TestingCapabilities for given scenario
                  value:
                  - sourceId: source
                    parameters:
                    - name: name
                      typ:
                        display: String
                        type: TypedClass
                        refClazzName: java.lang.String
                        params: []
                      editor:
                        type: RawParameterEditor
                      defaultValue:
                        language: spel
                        expression: ''
                      additionalVariables: {}
                      variablesToHide: []
                      branchParam: false
                      label: name
                      requiredParam: true
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/user:
    get:
      tags:
      - User
      summary: Logged user info service
      operationId: getApiUser
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisplayableUser'
              examples:
                Example0:
                  summary: Common user info
                  value:
                    id: reader
                    username: reader
                    isAdmin: false
                    categories:
                    - Category1
                    categoryPermissions:
                      Category1:
                      - Read
                    globalPermissions: []
                Example1:
                  summary: Admin user info
                  value:
                    id: admin
                    username: admin
                    isAdmin: true
                    categories:
                    - Category1
                    - Category2
                    categoryPermissions: {}
                    globalPermissions: []
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/{versionId}/activity/attachments:
    post:
      tags:
      - Activities
      summary: Add scenario attachment
      operationId: postApiProcessesScenarionameVersionidActivityAttachments
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: versionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Content-Disposition
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: path parameter versionId, Invalid value for: body, Invalid
            value for: header Content-Disposition'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/{versionId}/activity/comment:
    post:
      tags:
      - Activities
      summary: Add scenario comment
      operationId: postApiProcessesScenarionameVersionidActivityComment
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: versionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: path parameter versionId'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/activity/attachments:
    get:
      tags:
      - Activities
      summary: Scenario attachments
      operationId: getApiProcessesScenarionameActivityAttachments
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioAttachments'
              examples:
                Example:
                  summary: Display scenario activity
                  value:
                    attachments:
                    - id: 1
                      scenarioVersion: 1
                      fileName: some_file.txt
                      user: test
                      createDate: '2024-01-17T14:21:17Z'
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/activity/attachments/{attachmentId}:
    get:
      tags:
      - Activities
      summary: Download attachment
      operationId: getApiProcessesScenarionameActivityAttachmentsAttachmentid
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          headers:
            Content-Disposition:
              required: false
              schema:
                type:
                - string
                - 'null'
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: path parameter attachmentId'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
    delete:
      tags:
      - Activities
      summary: Delete scenario attachment
      operationId: deleteApiProcessesScenarionameActivityAttachmentsAttachmentid
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: attachmentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: ''
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: path parameter attachmentId'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '500':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Unable to delete attachment with given id
                  value: 'Unable to delete attachment with id: 123'
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/activity/comment/{scenarioActivityId}:
    put:
      tags:
      - Activities
      summary: Edit process comment
      operationId: putApiProcessesScenarionameActivityCommentScenarioactivityid
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: scenarioActivityId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Invalid comment
                  value: Comment is required.
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '500':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
              examples:
                Example:
                  summary: 'Unable to edit comment for activity with id: {commentId}'
                  value: 'Unable to delete comment for activity with id: a76d6eba-9b6c-4d97-aaa1-984a23f88019'
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
    delete:
      tags:
      - Activities
      summary: Delete process comment
      operationId: deleteApiProcessesScenarionameActivityCommentScenarioactivityid
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: scenarioActivityId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Invalid comment
                  value: Comment is required.
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '500':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
              examples:
                Example:
                  summary: 'Unable to edit comment for activity with id: {commentId}'
                  value: 'Unable to delete comment for activity with id: a76d6eba-9b6c-4d97-aaa1-984a23f88019'
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/{versionId}/activity/comments:
    post:
      tags:
      - Activities
      summary: Add scenario comment
      operationId: postApiProcessesScenarionameVersionidActivityComments
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: versionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity, Invalid
            value for: path parameter versionId'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      deprecated: true
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/activity/comments/{commentId}:
    delete:
      tags:
      - Activities
      summary: Delete process comment
      operationId: deleteApiProcessesScenarionameActivityCommentsCommentid
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Invalid comment
                  value: Comment is required.
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '500':
          description: ''
          content:
            text/plain:
              schema:
                anyOf:
                - type: string
                - type: string
              examples:
                Example:
                  summary: 'Unable to edit comment for activity with id: {commentId}'
                  value: 'Unable to delete comment for activity with id: a76d6eba-9b6c-4d97-aaa1-984a23f88019'
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      deprecated: true
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/activity:
    get:
      tags:
      - Activities
      summary: Scenario activity
      operationId: getApiProcessesScenarionameActivity
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessActivity'
              examples:
                Example:
                  summary: Display scenario activity
                  value:
                    comments:
                    - id: 1
                      processVersionId: 1
                      content: some comment
                      user: test
                      createDate: '2024-01-17T14:21:17Z'
                    attachments:
                    - id: 1
                      processVersionId: 1
                      fileName: some_file.txt
                      user: test
                      createDate: '2024-01-17T14:21:17Z'
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      deprecated: true
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/activity/activities:
    get:
      tags:
      - Activities
      summary: Scenario activities
      operationId: getApiProcessesScenarionameActivityActivities
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioActivities'
              examples:
                Example:
                  summary: Display scenario actions
                  value:
                    activities:
                    - id: 80c95497-3b53-4435-b2d9-ae73c5766213
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields: []
                      type: SCENARIO_CREATED
                    - id: 070a4e5c-21e5-4e63-acac-0052cf705a90
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields: []
                      type: SCENARIO_ARCHIVED
                    - id: fa35d944-fe20-4c4f-96c6-316b6197951a
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields: []
                      type: SCENARIO_UNARCHIVED
                    - id: 545b7d87-8cdf-4cb5-92c4-38ddbfca3d08
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          value: Deployment of scenario - task JIRA-1234
                          status: AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields: []
                      type: SCENARIO_DEPLOYED
                    - id: c354eba1-de97-455c-b977-074729c41ce7
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          value: Canceled because marketing campaign ended
                          status: AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields: []
                      type: SCENARIO_CANCELED
                    - id: 07b04d45-c7c0-4980-a3bc-3c7f66410f68
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 2
                      comment:
                        content:
                          value: Added new processing step
                          status: AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields: []
                      overrideDisplayableName: Version 2 saved
                      type: SCENARIO_MODIFIED
                    - id: da3d1f78-7d73-4ed9-b0e5-95538e150d0d
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields:
                      - name: oldName
                        value: marketing campaign
                      - name: newName
                        value: old marketing campaign
                      type: SCENARIO_NAME_CHANGED
                    - id: edf8b047-9165-445d-a173-ba61812dbd63
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          value: Added new processing step
                          status: AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields: []
                      type: COMMENT_ADDED
                    - id: 369367d6-d445-4327-ac23-4a94367b1d9e
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          status: NOT_AVAILABLE
                        lastModifiedBy: John Doe
                        lastModifiedAt: '2024-01-18T14:21:17Z'
                      additionalFields: []
                      type: COMMENT_ADDED
                    - id: b29916a9-34d4-4fc2-a6ab-79569f68c0b2
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      attachment:
                        file:
                          id: 10000001
                          status: AVAILABLE
                        filename: attachment01.png
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields: []
                      overrideDisplayableName: attachment01.png
                      type: ATTACHMENT_ADDED
                    - id: d0a7f4a2-abcc-4ffa-b1ca-68f6da3e999a
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      attachment:
                        file:
                          status: DELETED
                        filename: attachment01.png
                        lastModifiedBy: John Doe
                        lastModifiedAt: '2024-01-18T14:21:17Z'
                      additionalFields: []
                      overrideDisplayableName: File removed
                      type: ATTACHMENT_ADDED
                    - id: 683df470-0b33-4ead-bf61-fa35c63484f3
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields:
                      - name: from
                        value: Request-Response
                      - name: to
                        value: Batch
                      type: CHANGED_PROCESSING_MODE
                    - id: 4da0f1ac-034a-49b6-81c9-8ee48ba1d830
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields:
                      - name: sourceEnvironment
                        value: preprod
                      - name: sourceUser
                        value: user-preprod
                      - name: targetEnvironment
                        value: prod
                      - name: sourceScenarioVersionId
                        value: '23'
                      type: INCOMING_MIGRATION
                    - id: 49fcd45d-3fa6-48d4-b8ed-b3055910c7ad
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields:
                      - name: destinationEnvironment
                        value: preprod
                      type: OUTGOING_MIGRATION
                    - id: 924dfcd3-fbc7-44ea-8763-813874382204
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          value: Run campaign
                          status: AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields:
                      - name: status
                        value: Run now execution finished
                      - name: started
                        value: '2024-01-17 14:21:17'
                      - name: finished
                        value: '2024-01-17 14:21:17'
                      - name: errorMessage
                        value: Execution error occurred
                      type: PERFORMED_SINGLE_EXECUTION
                    - id: 924dfcd3-fbc7-44ea-8763-813874382204
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          status: NOT_AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields:
                      - name: status
                        value: Run now execution finished
                      - name: started
                        value: '2024-01-17 14:21:17'
                      - name: finished
                        value: '2024-01-17 14:21:17'
                      type: PERFORMED_SINGLE_EXECUTION
                    - id: 9b27797e-aa03-42ba-8406-d0ae8005a883
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields:
                      - name: status
                        value: Scheduled execution finished
                      - name: created
                        value: '2024-01-17 13:21:17'
                      - name: started
                        value: '2024-01-17 14:21:17'
                      - name: finished
                        value: '2024-01-17 14:21:17'
                      - name: scheduleName
                        value: main-schedule
                      type: PERFORMED_SCHEDULED_EXECUTION
                    - id: 9b27797e-aa03-42ba-8406-d0ae8005a883
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      additionalFields:
                      - name: status
                        value: Deployment will be retried
                      - name: created
                        value: '2024-01-17 13:21:17'
                      - name: started
                        value: '2024-01-17 14:21:17'
                      - name: finished
                        value: '2024-01-17 14:21:17'
                      - name: scheduleName
                        value: main-schedule
                      - name: retriesLeft
                        value: '1'
                      - name: nextRetryAt
                        value: '2024-01-17 15:21:17'
                      type: PERFORMED_SCHEDULED_EXECUTION
                    - id: 33509d37-7657-4229-940f-b5736c82fb13
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          value: JIRA-12345, JIRA-32146
                          status: AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields: []
                      type: AUTOMATIC_UPDATE
                    - id: 33509d37-7657-4229-940f-b5736c82fb13
                      user: some user
                      date: '2024-01-17T14:21:17Z'
                      scenarioVersionId: 1
                      comment:
                        content:
                          value: Execute special execution of scenario
                          status: AVAILABLE
                        lastModifiedBy: some user
                        lastModifiedAt: '2024-01-17T14:21:17Z'
                      additionalFields:
                      - name: actionName
                        value: special_execution
                      overrideIcon: /assets/states/deploy-running-animated.svg
                      type: CUSTOM_ACTION
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
  /api/processes/{scenarioName}/activity/activities/metadata:
    get:
      tags:
      - Activities
      summary: Scenario activities metadata
      operationId: getApiProcessesScenarionameActivityActivitiesMetadata
      parameters:
      - name: Nu-Impersonate-User-Identity
        in: header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: scenarioName
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioActivitiesMetadata'
              examples:
                Example0:
                  value:
                    activities:
                    - type: SCENARIO_CREATED
                      displayableName: Scenario created
                      icon: /assets/activities/scenarioModified.svg
                      supportedActions: []
                    - type: SCENARIO_ARCHIVED
                      displayableName: Scenario archived
                      icon: /assets/activities/archived.svg
                      supportedActions: []
                    - type: SCENARIO_UNARCHIVED
                      displayableName: Scenario unarchived
                      icon: /assets/activities/unarchived.svg
                      supportedActions: []
                    - type: SCENARIO_DEPLOYED
                      displayableName: Deployment
                      icon: /assets/activities/deployed.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: SCENARIO_PAUSED
                      displayableName: Pause
                      icon: /assets/activities/pause.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: SCENARIO_CANCELED
                      displayableName: Cancel
                      icon: /assets/activities/cancel.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: SCENARIO_MODIFIED
                      displayableName: Scenario modified
                      icon: /assets/activities/scenarioModified.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                      - compare
                    - type: SCENARIO_NAME_CHANGED
                      displayableName: Scenario name changed
                      icon: /assets/activities/scenarioModified.svg
                      supportedActions: []
                    - type: COMMENT_ADDED
                      displayableName: Comment
                      icon: /assets/activities/comment.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: ATTACHMENT_ADDED
                      displayableName: Attachment
                      icon: /assets/activities/attachment.svg
                      supportedActions:
                      - download_attachment
                      - delete_attachment
                    - type: CHANGED_PROCESSING_MODE
                      displayableName: Processing mode change
                      icon: /assets/activities/processingModeChange.svg
                      supportedActions: []
                    - type: INCOMING_MIGRATION
                      displayableName: Incoming migration
                      icon: /assets/activities/migration.svg
                      supportedActions:
                      - compare
                    - type: OUTGOING_MIGRATION
                      displayableName: Outgoing migration
                      icon: /assets/activities/migration.svg
                      supportedActions: []
                    - type: PERFORMED_SINGLE_EXECUTION
                      displayableName: Processing data
                      icon: /assets/activities/processingData.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: PERFORMED_SCHEDULED_EXECUTION
                      displayableName: Processing data
                      icon: /assets/activities/processingData.svg
                      supportedActions: []
                    - type: AUTOMATIC_UPDATE
                      displayableName: Automatic update
                      icon: /assets/activities/automaticUpdate.svg
                      supportedActions:
                      - compare
                    - type: CUSTOM_ACTION
                      displayableName: Custom action
                      icon: /assets/activities/customAction.svg
                      supportedActions: []
                    actions:
                    - id: compare
                      displayableName: Compare
                      icon: /assets/activities/actions/compare.svg
                    - id: delete_comment
                      displayableName: Delete comment
                      icon: /assets/activities/actions/delete.svg
                    - id: add_comment
                      displayableName: Add comment
                      icon: /assets/activities/actions/add_comment.svg
                    - id: edit_comment
                      displayableName: Edit comment
                      icon: /assets/activities/actions/edit.svg
                    - id: download_attachment
                      displayableName: Download
                      icon: /assets/activities/actions/download.svg
                    - id: delete_attachment
                      displayableName: Delete
                      icon: /assets/activities/actions/delete.svg
                Example1:
                  value:
                    activities:
                    - type: SCENARIO_CREATED
                      displayableName: Fragment created
                      icon: /assets/activities/scenarioModified.svg
                      supportedActions: []
                    - type: SCENARIO_ARCHIVED
                      displayableName: Fragment archived
                      icon: /assets/activities/archived.svg
                      supportedActions: []
                    - type: SCENARIO_UNARCHIVED
                      displayableName: Fragment unarchived
                      icon: /assets/activities/unarchived.svg
                      supportedActions: []
                    - type: SCENARIO_DEPLOYED
                      displayableName: Deployment
                      icon: /assets/activities/deployed.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: SCENARIO_PAUSED
                      displayableName: Pause
                      icon: /assets/activities/pause.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: SCENARIO_CANCELED
                      displayableName: Cancel
                      icon: /assets/activities/cancel.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: SCENARIO_MODIFIED
                      displayableName: Fragment modified
                      icon: /assets/activities/scenarioModified.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                      - compare
                    - type: SCENARIO_NAME_CHANGED
                      displayableName: Fragment name changed
                      icon: /assets/activities/scenarioModified.svg
                      supportedActions: []
                    - type: COMMENT_ADDED
                      displayableName: Comment
                      icon: /assets/activities/comment.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: ATTACHMENT_ADDED
                      displayableName: Attachment
                      icon: /assets/activities/attachment.svg
                      supportedActions:
                      - download_attachment
                      - delete_attachment
                    - type: CHANGED_PROCESSING_MODE
                      displayableName: Processing mode change
                      icon: /assets/activities/processingModeChange.svg
                      supportedActions: []
                    - type: INCOMING_MIGRATION
                      displayableName: Incoming migration
                      icon: /assets/activities/migration.svg
                      supportedActions:
                      - compare
                    - type: OUTGOING_MIGRATION
                      displayableName: Outgoing migration
                      icon: /assets/activities/migration.svg
                      supportedActions: []
                    - type: PERFORMED_SINGLE_EXECUTION
                      displayableName: Processing data
                      icon: /assets/activities/processingData.svg
                      supportedActions:
                      - delete_comment
                      - edit_comment
                      - add_comment
                    - type: PERFORMED_SCHEDULED_EXECUTION
                      displayableName: Processing data
                      icon: /assets/activities/processingData.svg
                      supportedActions: []
                    - type: AUTOMATIC_UPDATE
                      displayableName: Automatic update
                      icon: /assets/activities/automaticUpdate.svg
                      supportedActions:
                      - compare
                    - type: CUSTOM_ACTION
                      displayableName: Custom action
                      icon: /assets/activities/customAction.svg
                      supportedActions: []
                    actions:
                    - id: compare
                      displayableName: Compare
                      icon: /assets/activities/actions/compare.svg
                    - id: delete_comment
                      displayableName: Delete comment
                      icon: /assets/activities/actions/delete.svg
                    - id: add_comment
                      displayableName: Add comment
                      icon: /assets/activities/actions/add_comment.svg
                    - id: edit_comment
                      displayableName: Edit comment
                      icon: /assets/activities/actions/edit.svg
                    - id: download_attachment
                      displayableName: Download
                      icon: /assets/activities/actions/download.svg
                    - id: delete_attachment
                      displayableName: Delete
                      icon: /assets/activities/actions/delete.svg
        '400':
          description: 'Invalid value for: header Nu-Impersonate-User-Identity'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                CannotAuthenticateUser:
                  value: The supplied authentication is invalid
                ImpersonatedUserNotExistsError:
                  value: No impersonated user data found for provided identity
        '403':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                InsufficientPermission:
                  value: The supplied authentication is not authorized to access this
                    resource
                ImpersonationMissingPermission:
                  value: The supplied authentication is not authorized to impersonate
        '404':
          description: ''
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: No scenario {scenarioName} found
                  value: No scenario 'example scenario' found
        '501':
          description: Impersonation is not supported for defined authentication mechanism
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example:
                  summary: Cannot authenticate impersonated user as impersonation
                    is not supported by the authentication mechanism
                  value: Provided authentication method does not support impersonation
      security:
      - {}
      - httpAuth: []
components:
  schemas:
    AdditionalField:
      title: AdditionalField
      type: object
      required:
      - name
      - value
      properties:
        name:
          type: string
        value:
          type: string
    AdditionalInfo:
      title: AdditionalInfo
      oneOf:
      - $ref: '#/components/schemas/MarkdownAdditionalInfo'
    AdhocTestParametersRequest:
      title: AdhocTestParametersRequest
      type: object
      required:
      - sourceParameters
      - scenarioGraph
      properties:
        sourceParameters:
          $ref: '#/components/schemas/TestSourceParameters'
        scenarioGraph:
          type: object
    ApiVersion:
      title: ApiVersion
      type: object
      required:
      - version
      properties:
        version:
          type: integer
          format: int32
    Attachment:
      title: Attachment
      type: object
      required:
      - id
      - scenarioVersion
      - fileName
      - user
      - createDate
      properties:
        id:
          type: integer
          format: int64
        scenarioVersion:
          type: integer
          format: int64
        fileName:
          type: string
        user:
          type: string
        createDate:
          type: string
          format: date-time
    Attachment1:
      title: Attachment
      type: object
      required:
      - id
      - processVersionId
      - fileName
      - user
      - createDate
      properties:
        id:
          type: integer
          format: int64
        processVersionId:
          type: integer
          format: int64
        fileName:
          type: string
        user:
          type: string
        createDate:
          type: string
          format: date-time
    Available:
      title: Available
      type: object
      required:
      - value
      - status
      properties:
        value:
          type: string
        status:
          type: string
          const: AVAILABLE
    Available1:
      title: Available
      type: object
      required:
      - id
      - status
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          const: AVAILABLE
    BoolParameterEditor:
      title: BoolParameterEditor
      type: object
    BranchEndDefinition:
      title: BranchEndDefinition
      type: object
      required:
      - id
      - joinId
      properties:
        id:
          type: string
        joinId:
          type: string
    BranchParameters:
      title: BranchParameters
      type: object
      required:
      - branchId
      properties:
        branchId:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
    BuildInfoDto:
      title: BuildInfoDto
      type: object
      required:
      - name
      - gitCommit
      - buildTime
      - version
      - processingType
      properties:
        name:
          type: string
        gitCommit:
          type: string
        buildTime:
          type: string
        version:
          type: string
        processingType:
          $ref: '#/components/schemas/Map_Map_String_String'
        globalBuildInfo:
          anyOf:
          - $ref: '#/components/schemas/Map_String'
          - type: 'null'
    CaretPosition2d:
      title: CaretPosition2d
      type: object
      required:
      - row
      - column
      properties:
        row:
          type: integer
          format: int32
        column:
          type: integer
          format: int32
    CellError:
      title: CellError
      type: object
      required:
      - columnName
      - rowIndex
      - errorMessage
      properties:
        columnName:
          type: string
        rowIndex:
          type: integer
          format: int32
        errorMessage:
          type: string
    ColumnDefinition:
      title: ColumnDefinition
      type: object
      required:
      - name
      - aType
      properties:
        name:
          type: string
        aType:
          type: string
    Comment:
      title: Comment
      type: object
      required:
      - id
      - processVersionId
      - content
      - user
      - createDate
      properties:
        id:
          type: integer
          format: int64
        processVersionId:
          type: integer
          format: int64
        content:
          type: string
        user:
          type: string
        createDate:
          type: string
          format: date-time
    ComponentLink:
      title: ComponentLink
      type: object
      required:
      - id
      - title
      - icon
      - url
      properties:
        id:
          type: string
        title:
          type: string
        icon:
          type: string
        url:
          type: string
    ComponentListElement:
      title: ComponentListElement
      type: object
      required:
      - id
      - name
      - icon
      - componentType
      - componentGroupName
      - usageCount
      - allowedProcessingModes
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        componentType:
          $ref: '#/components/schemas/ComponentType'
        componentGroupName:
          type: string
        categories:
          type: array
          items:
            type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/ComponentLink'
        usageCount:
          type: integer
          format: int64
        allowedProcessingModes:
          type: array
          items:
            type: string
    ComponentType:
      title: ComponentType
      type: string
      enum:
      - source
      - sink
      - service
      - custom
      - fragment
      - builtin
    ComponentUsagesInScenario:
      title: ComponentUsagesInScenario
      type: object
      required:
      - name
      - isFragment
      - processCategory
      - modificationDate
      - modifiedAt
      - modifiedBy
      - createdAt
      - createdBy
      properties:
        name:
          type: string
        nodesUsagesData:
          type: array
          items:
            $ref: '#/components/schemas/NodeUsageData'
        isFragment:
          type: boolean
        processCategory:
          type: string
        modificationDate:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        modifiedBy:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        lastAction:
          anyOf:
          - $ref: '#/components/schemas/ProcessAction'
          - type: 'null'
    CronParameterEditor:
      title: CronParameterEditor
      type: object
    DataToRefresh:
      title: DataToRefresh
      type: string
      enum:
      - activity
      - state
      - creator
    DateParameterEditor:
      title: DateParameterEditor
      type: object
    DateTimeParameterEditor:
      title: DateTimeParameterEditor
      type: object
    Deleted:
      title: Deleted
      type: object
      required:
      - status
      properties:
        status:
          type: string
          const: DELETED
    Dict:
      title: Dict
      type: object
      required:
      - id
      - valueType
      properties:
        id:
          type: string
        valueType:
          $ref: '#/components/schemas/SingleTypingResult'
    DictDto:
      title: DictDto
      type: object
      required:
      - id
      - label
      properties:
        id:
          type: string
        label:
          type: string
    DictEntry:
      title: DictEntry
      type: object
      required:
      - key
      - label
      properties:
        key:
          type: string
        label:
          type: string
    DictListRequestDto:
      title: DictListRequestDto
      type: object
      required:
      - expectedType
      properties:
        expectedType: {}
    DictParameterEditor:
      title: DictParameterEditor
      type: object
      required:
      - dictId
      properties:
        dictId:
          type: string
    Dimensions:
      title: Dimensions
      type: object
      required:
      - width
      - height
      properties:
        width:
          type: integer
          format: int64
        height:
          type: integer
          format: int64
    DisplayableUser:
      title: DisplayableUser
      type: object
      required:
      - id
      - username
      - isAdmin
      - categoryPermissions
      properties:
        id:
          type: string
        username:
          type: string
        isAdmin:
          type: boolean
        categories:
          type: array
          items:
            type: string
        categoryPermissions:
          $ref: '#/components/schemas/Map_List_String'
        globalPermissions:
          type: array
          items:
            type: string
    DualParameterEditor:
      title: DualParameterEditor
      type: object
      required:
      - simpleEditor
      - defaultMode
      properties:
        simpleEditor:
          $ref: '#/components/schemas/SimpleParameterEditor'
        defaultMode:
          type: string
    DurationParameterEditor:
      title: DurationParameterEditor
      type: object
      properties:
        timeRangeComponents:
          type: array
          items:
            type: object
            required:
            - name
            - duration
            properties:
              name:
                type: string
              duration:
                type: string
    Edge:
      title: Edge
      type: object
      required:
      - from
      - to
      properties:
        from:
          type: string
        to:
          type: string
        edgeType:
          anyOf:
          - $ref: '#/components/schemas/EdgeType'
          - type: 'null'
    EdgeType:
      title: EdgeType
      oneOf:
      - $ref: '#/components/schemas/FilterFalse'
      - $ref: '#/components/schemas/FilterTrue'
      - $ref: '#/components/schemas/FragmentOutput'
      - $ref: '#/components/schemas/NextSwitch'
      - $ref: '#/components/schemas/SwitchDefault'
    ErrorDetails:
      title: ErrorDetails
      oneOf:
      - $ref: '#/components/schemas/TabularDataDefinitionParserErrorDetails'
    Expression:
      title: Expression
      type: object
      required:
      - language
      - expression
      properties:
        language:
          type: string
        expression:
          type: string
    ExpressionSuggestionDto:
      title: ExpressionSuggestionDto
      type: object
      required:
      - methodName
      - refClazz
      - fromClass
      properties:
        methodName:
          type: string
        refClazz:
          oneOf:
          - $ref: '#/components/schemas/TypedClass'
          - $ref: '#/components/schemas/TypedDict'
          - $ref: '#/components/schemas/TypedNull'
          - $ref: '#/components/schemas/TypedObjectTypingResult'
          - $ref: '#/components/schemas/TypedObjectWithValue'
          - $ref: '#/components/schemas/TypedTaggedValue'
          - $ref: '#/components/schemas/TypedUnion'
          - $ref: '#/components/schemas/Unknown'
        fromClass:
          type: boolean
        description:
          type:
          - string
          - 'null'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDto'
    ExpressionSuggestionRequestDto:
      title: ExpressionSuggestionRequestDto
      type: object
      required:
      - expression
      - caretPosition2d
      - variableTypes
      properties:
        expression:
          $ref: '#/components/schemas/Expression'
        caretPosition2d:
          $ref: '#/components/schemas/CaretPosition2d'
        variableTypes:
          $ref: '#/components/schemas/Map_TypingResultInJson'
    Field:
      title: Field
      type: object
      required:
      - name
      - expression
      properties:
        name:
          type: string
        expression:
          $ref: '#/components/schemas/Expression'
    FilterFalse:
      title: FilterFalse
      type: object
    FilterTrue:
      title: FilterTrue
      type: object
    FixedExpressionValue:
      title: FixedExpressionValue
      type: object
      required:
      - expression
      - label
      properties:
        expression:
          type: string
        label:
          type: string
    FixedExpressionValueWithIcon:
      title: FixedExpressionValueWithIcon
      type: object
      required:
      - expression
      - label
      - icon
      properties:
        expression:
          type: string
        label:
          type: string
        icon:
          type: string
    FixedValuesParameterEditor:
      title: FixedValuesParameterEditor
      type: object
      properties:
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/FixedExpressionValue'
    FixedValuesWithIconParameterEditor:
      title: FixedValuesWithIconParameterEditor
      type: object
      properties:
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/FixedExpressionValueWithIcon'
    FixedValuesWithRadioParameterEditor:
      title: FixedValuesWithRadioParameterEditor
      type: object
      properties:
        possibleValues:
          type: array
          items:
            $ref: '#/components/schemas/FixedExpressionValue'
    FragmentClazzRef:
      title: FragmentClazzRef
      type: object
      required:
      - refClazzName
      properties:
        refClazzName:
          type: string
    FragmentOutput:
      title: FragmentOutput
      type: object
      required:
      - name
      properties:
        name:
          type: string
    FragmentParameter:
      title: FragmentParameter
      type: object
      required:
      - name
      - typ
      - required
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/FragmentClazzRef'
        required:
          type: boolean
        initialValue:
          anyOf:
          - $ref: '#/components/schemas/FixedExpressionValue'
          - type: 'null'
        hintText:
          type:
          - string
          - 'null'
        valueEditor:
          anyOf:
          - $ref: '#/components/schemas/ParameterValueInput'
          - type: 'null'
        valueCompileTimeValidation:
          anyOf:
          - $ref: '#/components/schemas/ParameterValueCompileTimeValidation'
          - type: 'null'
    FragmentRef:
      title: FragmentRef
      type: object
      required:
      - id
      - outputVariableNames
      properties:
        id:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        outputVariableNames:
          $ref: '#/components/schemas/Map_String'
    FragmentUsageData:
      title: FragmentUsageData
      type: object
      required:
      - fragmentNodeId
      - nodeId
      properties:
        fragmentNodeId:
          type: string
        nodeId:
          type: string
    GetDeploymentStatusResponse:
      title: GetDeploymentStatusResponse
      type: object
      required:
      - name
      - modifiedAt
      properties:
        name:
          type: string
        problemDescription:
          type:
          - string
          - 'null'
        modifiedAt:
          type: string
          format: date-time
    HealthCheckProcessErrorResponseDto:
      title: HealthCheckProcessErrorResponseDto
      type: object
      required:
      - status
      properties:
        status:
          $ref: '#/components/schemas/Status1'
        message:
          type:
          - string
          - 'null'
        processes:
          type:
          - array
          - 'null'
          uniqueItems: true
          items:
            type: string
    HealthCheckProcessSuccessResponseDto:
      title: HealthCheckProcessSuccessResponseDto
      type: object
      required:
      - status
      properties:
        status:
          $ref: '#/components/schemas/Status'
        message:
          type:
          - string
          - 'null'
        processes:
          type:
          - array
          - 'null'
          uniqueItems: true
          items:
            type: string
    JsonParameterEditor:
      title: JsonParameterEditor
      type: object
    LayoutData:
      title: LayoutData
      type: object
      required:
      - x
      - y
      properties:
        x:
          type: integer
          format: int64
        y:
          type: integer
          format: int64
    List_Field:
      title: List_Field
      oneOf:
      - $ref: '#/components/schemas/Nil'
      - type: array
        items:
          $ref: '#/components/schemas/Field'
    List_FragmentParameter:
      title: List_FragmentParameter
      oneOf:
      - $ref: '#/components/schemas/Nil'
      - type: array
        items:
          $ref: '#/components/schemas/FragmentParameter'
    Map_EngineSetupName_List_String:
      title: Map_EngineSetupName_List_String
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    Map_List_String:
      title: Map_List_String
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    Map_Map_String_String:
      title: Map_Map_String_String
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Map_String'
    Map_Map_String_TypingResultInJson:
      title: Map_Map_String_TypingResultInJson
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Map_TypingResultInJson'
    Map_NodeId_String:
      title: Map_NodeId_String
      type: object
      additionalProperties:
        type: string
    Map_ParameterName_Expression:
      title: Map_ParameterName_Expression
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Expression'
    Map_String:
      title: Map_String
      type: object
      additionalProperties:
        type: string
    Map_TypingResult:
      title: Map_TypingResult
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TypingResult'
    Map_TypingResultInJson:
      title: Map_TypingResultInJson
      type: object
      additionalProperties:
        oneOf:
        - $ref: '#/components/schemas/TypedClass'
        - $ref: '#/components/schemas/TypedDict'
        - $ref: '#/components/schemas/TypedNull'
        - $ref: '#/components/schemas/TypedObjectTypingResult'
        - $ref: '#/components/schemas/TypedObjectWithValue'
        - $ref: '#/components/schemas/TypedTaggedValue'
        - $ref: '#/components/schemas/TypedUnion'
        - $ref: '#/components/schemas/Unknown'
    MarkdownAdditionalInfo:
      title: MarkdownAdditionalInfo
      type: object
      required:
      - content
      properties:
        content:
          type: string
    MigrateScenarioRequestDto:
      title: MigrateScenarioRequestDto
      oneOf:
      - $ref: '#/components/schemas/MigrateScenarioRequestDtoV1'
      - $ref: '#/components/schemas/MigrateScenarioRequestDtoV2'
      discriminator:
        propertyName: version
        mapping:
          '1': MigrateScenarioRequestDtoV1
          '2': MigrateScenarioRequestDtoV2
    MigrateScenarioRequestDtoV1:
      title: MigrateScenarioRequestDtoV1
      type: object
      required:
      - version
      - sourceEnvironmentId
      - remoteUserName
      - processingMode
      - engineSetupName
      - processCategory
      - scenarioGraph
      - processName
      - isFragment
      properties:
        version:
          type: integer
          format: int32
        sourceEnvironmentId:
          type: string
        remoteUserName:
          type: string
        processingMode:
          type: string
        engineSetupName:
          type: string
        processCategory:
          type: string
        scenarioGraph:
          type: object
        processName:
          type: string
        isFragment:
          type: boolean
    MigrateScenarioRequestDtoV2:
      title: MigrateScenarioRequestDtoV2
      type: object
      required:
      - version
      - sourceEnvironmentId
      - remoteUserName
      - processingMode
      - engineSetupName
      - processCategory
      - scenarioGraph
      - processName
      - isFragment
      properties:
        version:
          type: integer
          format: int32
        sourceEnvironmentId:
          type: string
        sourceScenarioVersionId:
          type:
          - integer
          - 'null'
          format: int64
        remoteUserName:
          type: string
        processingMode:
          type: string
        engineSetupName:
          type: string
        processCategory:
          type: string
        scenarioLabels:
          type: array
          items:
            type: string
        scenarioGraph:
          type: object
        processName:
          type: string
        isFragment:
          type: boolean
    NextSwitch:
      title: NextSwitch
      type: object
      required:
      - condition
      properties:
        condition:
          $ref: '#/components/schemas/Expression'
    Nil:
      title: Nil
      type: object
    NodeData:
      title: NodeData
      oneOf:
      - $ref: '#/components/schemas/Variable'
      - $ref: '#/components/schemas/VariableBuilder'
      - title: BranchEndData
        type: object
        required:
        - definition
        - type
        properties:
          definition:
            $ref: '#/components/schemas/BranchEndDefinition'
          type:
            $ref: '#/components/schemas/NodeTypes'
      - title: CustomNode
        type: object
        required:
        - id
        - nodeType
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          id:
            type: string
          nodeType:
            type: string
          outputVar:
            type:
            - string
            - 'null'
          parameters:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          type:
            $ref: '#/components/schemas/NodeTypes1'
      - title: Enricher
        type: object
        required:
        - id
        - output
        - service
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          id:
            type: string
          output:
            type: string
          service:
            $ref: '#/components/schemas/ServiceRef'
          type:
            $ref: '#/components/schemas/NodeTypes2'
      - title: Filter
        type: object
        required:
        - expression
        - id
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          expression:
            $ref: '#/components/schemas/Expression'
          id:
            type: string
          isDisabled:
            type:
            - boolean
            - 'null'
          type:
            $ref: '#/components/schemas/NodeTypes3'
      - title: FragmentInput
        type: object
        required:
        - id
        - ref
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          id:
            type: string
          isDisabled:
            type:
            - boolean
            - 'null'
          fragmentParams:
            type:
            - array
            - 'null'
            items:
              $ref: '#/components/schemas/FragmentParameter'
          ref:
            $ref: '#/components/schemas/FragmentRef'
          type:
            $ref: '#/components/schemas/NodeTypes4'
      - title: FragmentInputDefinition
        type: object
        required:
        - id
        - parameters
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          id:
            type: string
          parameters:
            $ref: '#/components/schemas/List_FragmentParameter'
          type:
            $ref: '#/components/schemas/NodeTypes5'
      - title: FragmentOutputDefinition
        type: object
        required:
        - id
        - fields
        - outputName
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          id:
            type: string
          fields:
            $ref: '#/components/schemas/List_Field'
          outputName:
            type: string
          type:
            $ref: '#/components/schemas/NodeTypes6'
      - title: Join
        type: object
        required:
        - id
        - nodeType
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          branchParameters:
            type: array
            items:
              $ref: '#/components/schemas/BranchParameters'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          id:
            type: string
          nodeType:
            type: string
          outputVar:
            type:
            - string
            - 'null'
          parameters:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          type:
            $ref: '#/components/schemas/NodeTypes7'
      - title: Processor
        type: object
        required:
        - id
        - service
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          id:
            type: string
          isDisabled:
            type:
            - boolean
            - 'null'
          service:
            $ref: '#/components/schemas/ServiceRef'
          type:
            $ref: '#/components/schemas/NodeTypes8'
      - title: Sink
        type: object
        required:
        - id
        - ref
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          id:
            type: string
          isDisabled:
            type:
            - boolean
            - 'null'
          ref:
            $ref: '#/components/schemas/SinkRef'
          type:
            $ref: '#/components/schemas/NodeTypes9'
      - title: Source
        type: object
        required:
        - id
        - type
        - ref
        properties:
          id:
            type: string
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          type:
            $ref: '#/components/schemas/NodeTypes10'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          ref:
            $ref: '#/components/schemas/SourceRef'
      - title: Split
        type: object
        required:
        - id
        - type
        properties:
          id:
            type: string
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          type:
            $ref: '#/components/schemas/NodeTypes11'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
      - title: Switch
        type: object
        required:
        - id
        - type
        properties:
          additionalFields:
            anyOf:
            - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
            - type: 'null'
          branchParametersTemplate:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          expression:
            anyOf:
            - $ref: '#/components/schemas/Expression'
            - type: 'null'
          exprVal:
            type:
            - string
            - 'null'
          id:
            type: string
          type:
            $ref: '#/components/schemas/NodeTypes12'
    NodeTypes:
      title: NodeTypes
      type: string
      enum:
      - BranchEndData
    NodeTypes1:
      title: NodeTypes
      type: string
      enum:
      - CustomNode
    NodeTypes10:
      title: NodeTypes
      type: string
      enum:
      - Source
    NodeTypes11:
      title: NodeTypes
      type: string
      enum:
      - Split
    NodeTypes12:
      title: NodeTypes
      type: string
      enum:
      - Switch
    NodeTypes13:
      title: NodeTypes
      type: string
      enum:
      - Variable
    NodeTypes14:
      title: NodeTypes
      type: string
      enum:
      - VariableBuilder
    NodeTypes2:
      title: NodeTypes
      type: string
      enum:
      - Enricher
    NodeTypes3:
      title: NodeTypes
      type: string
      enum:
      - Filter
    NodeTypes4:
      title: NodeTypes
      type: string
      enum:
      - FragmentInput
    NodeTypes5:
      title: NodeTypes
      type: string
      enum:
      - FragmentInputDefinition
    NodeTypes6:
      title: NodeTypes
      type: string
      enum:
      - FragmentOutputDefinition
    NodeTypes7:
      title: NodeTypes
      type: string
      enum:
      - Join
    NodeTypes8:
      title: NodeTypes
      type: string
      enum:
      - Processor
    NodeTypes9:
      title: NodeTypes
      type: string
      enum:
      - Sink
    NodeUsageData:
      title: NodeUsageData
      oneOf:
      - $ref: '#/components/schemas/FragmentUsageData'
      - $ref: '#/components/schemas/ScenarioUsageData'
    NodeValidationError:
      title: NodeValidationError
      type: object
      required:
      - typ
      - message
      - description
      - errorType
      properties:
        typ:
          type: string
        message:
          type: string
        description:
          type: string
        fieldName:
          type:
          - string
          - 'null'
        errorType:
          $ref: '#/components/schemas/NodeValidationErrorType'
        details:
          anyOf:
          - $ref: '#/components/schemas/ErrorDetails'
          - type: 'null'
    NodeValidationErrorType:
      title: NodeValidationErrorType
      type: string
      enum:
      - RenderNotAllowed
      - SaveNotAllowed
      - SaveAllowed
    NodeValidationRequestDto:
      title: NodeValidationRequestDto
      type: object
      required:
      - nodeData
      - processProperties
      - variableTypes
      properties:
        nodeData:
          $ref: '#/components/schemas/NodeData'
        variableTypes:
          $ref: '#/components/schemas/Map_TypingResultInJson'
        branchVariableTypes:
          anyOf:
          - $ref: '#/components/schemas/Map_Map_String_TypingResultInJson'
          - type: 'null'
        outgoingEdges:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/Edge'
    NodeValidationResultDto:
      title: NodeValidationResultDto
      type: object
      required:
      - validationPerformed
      properties:
        parameters:
          type:
          - array
          - 'null'
          items:
            $ref: '#/components/schemas/UIParameter'
        expressionType:
          anyOf:
          - oneOf:
            - $ref: '#/components/schemas/TypedClass'
            - $ref: '#/components/schemas/TypedDict'
            - $ref: '#/components/schemas/TypedNull'
            - $ref: '#/components/schemas/TypedObjectTypingResult'
            - $ref: '#/components/schemas/TypedObjectWithValue'
            - $ref: '#/components/schemas/TypedTaggedValue'
            - $ref: '#/components/schemas/TypedUnion'
            - $ref: '#/components/schemas/Unknown'
          - type: 'null'
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/NodeValidationError'
        validationPerformed:
          type: boolean
    NotAvailable:
      title: NotAvailable
      type: object
      required:
      - status
      properties:
        status:
          type: string
          const: NOT_AVAILABLE
    Notification:
      title: Notification
      type: object
      required:
      - id
      - message
      properties:
        id:
          type: string
        scenarioName:
          type:
          - string
          - 'null'
        message:
          type: string
        type:
          anyOf:
          - $ref: '#/components/schemas/NotificationType'
          - type: 'null'
        toRefresh:
          type: array
          items:
            $ref: '#/components/schemas/DataToRefresh'
    NotificationType:
      title: NotificationType
      type: string
      enum:
      - info
      - success
      - error
    Parameter:
      title: Parameter
      type: object
      required:
      - name
      - expression
      properties:
        name:
          type: string
        expression:
          $ref: '#/components/schemas/Expression'
    ParameterDto:
      title: ParameterDto
      type: object
      required:
      - name
      - refClazz
      properties:
        name:
          type: string
        refClazz:
          oneOf:
          - $ref: '#/components/schemas/TypedClass'
          - $ref: '#/components/schemas/TypedDict'
          - $ref: '#/components/schemas/TypedNull'
          - $ref: '#/components/schemas/TypedObjectTypingResult'
          - $ref: '#/components/schemas/TypedObjectWithValue'
          - $ref: '#/components/schemas/TypedTaggedValue'
          - $ref: '#/components/schemas/TypedUnion'
          - $ref: '#/components/schemas/Unknown'
    ParameterEditor:
      title: ParameterEditor
      oneOf:
      - $ref: '#/components/schemas/BoolParameterEditor'
      - $ref: '#/components/schemas/CronParameterEditor'
      - $ref: '#/components/schemas/DateParameterEditor'
      - $ref: '#/components/schemas/DateTimeParameterEditor'
      - $ref: '#/components/schemas/DictParameterEditor'
      - $ref: '#/components/schemas/DualParameterEditor'
      - $ref: '#/components/schemas/DurationParameterEditor'
      - $ref: '#/components/schemas/FixedValuesParameterEditor'
      - $ref: '#/components/schemas/FixedValuesWithIconParameterEditor'
      - $ref: '#/components/schemas/FixedValuesWithRadioParameterEditor'
      - $ref: '#/components/schemas/JsonParameterEditor'
      - $ref: '#/components/schemas/PeriodParameterEditor'
      - $ref: '#/components/schemas/RawParameterEditor'
      - $ref: '#/components/schemas/SpelTemplateParameterEditor'
      - $ref: '#/components/schemas/SqlParameterEditor'
      - $ref: '#/components/schemas/StringParameterEditor'
      - $ref: '#/components/schemas/TabularTypedDataEditor'
      - $ref: '#/components/schemas/TextareaParameterEditor'
      - $ref: '#/components/schemas/TimeParameterEditor'
    ParameterValueCompileTimeValidation:
      title: ParameterValueCompileTimeValidation
      type: object
      required:
      - validationExpression
      properties:
        validationExpression:
          $ref: '#/components/schemas/Expression'
        validationFailedMessage:
          type:
          - string
          - 'null'
    ParameterValueInput:
      title: ParameterValueInput
      oneOf:
      - $ref: '#/components/schemas/ValueInputWithDictEditor'
      - $ref: '#/components/schemas/ValueInputWithFixedValuesProvided'
    ParametersValidationRequestDto:
      title: ParametersValidationRequestDto
      type: object
      required:
      - variableTypes
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/UIValueParameterDto'
        variableTypes:
          $ref: '#/components/schemas/Map_TypingResultInJson'
    ParametersValidationResultDto:
      title: ParametersValidationResultDto
      type: object
      required:
      - validationPerformed
      properties:
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/NodeValidationError'
        validationPerformed:
          type: boolean
    PeriodParameterEditor:
      title: PeriodParameterEditor
      type: object
      properties:
        timeRangeComponents:
          type: array
          items:
            type: object
            required:
            - name
            - duration
            properties:
              name:
                type: string
              duration:
                type: string
    ProcessAction:
      title: ProcessAction
      type: object
      required:
      - id
      - processId
      - processVersionId
      - user
      - createdAt
      - performedAt
      - actionName
      - state
      - buildInfo
      properties:
        id:
          type: string
          format: uuid
        processId:
          type: integer
          format: int64
        processVersionId:
          type: integer
          format: int64
        user:
          type: string
        createdAt:
          type: string
          format: date-time
        performedAt:
          type: string
          format: date-time
        actionName:
          type: string
        state:
          $ref: '#/components/schemas/ProcessActionState'
        failureMessage:
          type:
          - string
          - 'null'
        commentId:
          type:
          - integer
          - 'null'
          format: int64
        comment:
          type:
          - string
          - 'null'
        buildInfo:
          $ref: '#/components/schemas/Map_String'
    ProcessActionState:
      title: ProcessActionState
      type: string
      enum:
      - IN_PROGRESS
      - FINISHED
      - FAILED
      - EXECUTION_FINISHED
    ProcessActivity:
      title: ProcessActivity
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment1'
    ProcessAdditionalFields:
      title: ProcessAdditionalFields
      type: object
      required:
      - properties
      - metaDataType
      - showDescription
      properties:
        description:
          type:
          - string
          - 'null'
        properties:
          $ref: '#/components/schemas/Map_String'
        metaDataType:
          type: string
        showDescription:
          type: boolean
    ProcessProperties:
      title: ProcessProperties
      type: object
      required:
      - additionalFields
      properties:
        additionalFields:
          $ref: '#/components/schemas/ProcessAdditionalFields'
    PropertiesValidationRequestDto:
      title: PropertiesValidationRequestDto
      type: object
      required:
      - additionalFields
      - name
      properties:
        additionalFields:
          $ref: '#/components/schemas/ProcessAdditionalFields'
        name:
          type: string
    RawParameterEditor:
      title: RawParameterEditor
      type: object
    RecordsRequestDto:
      title: RecordsRequestDto
      type: object
      required:
      - processProperties
      - nodeData
      properties:
        nodeData:
          $ref: '#/components/schemas/NodeData'
    RegisterStatisticsRequestDto:
      title: RegisterStatisticsRequestDto
      type: object
      properties:
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/StatisticDto'
    RunDeploymentRequest:
      title: RunDeploymentRequest
      type: object
      required:
      - scenarioName
      - nodesDeploymentData
      properties:
        scenarioName:
          type: string
        nodesDeploymentData:
          $ref: '#/components/schemas/Map_NodeId_String'
        comment:
          type:
          - string
          - 'null'
    ScenarioActivities:
      title: ScenarioActivities
      type: object
      properties:
        activities:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioActivity'
    ScenarioActivitiesMetadata:
      title: ScenarioActivitiesMetadata
      type: object
      properties:
        activities:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioActivityMetadata'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioActivityActionMetadata'
    ScenarioActivity:
      title: ScenarioActivity
      type: object
      required:
      - id
      - user
      - date
      - type
      properties:
        id:
          type: string
          format: uuid
        user:
          type: string
        date:
          type: string
          format: date-time
        scenarioVersionId:
          type:
          - integer
          - 'null'
          format: int64
        comment:
          anyOf:
          - $ref: '#/components/schemas/ScenarioActivityComment'
          - type: 'null'
        attachment:
          anyOf:
          - $ref: '#/components/schemas/ScenarioActivityAttachment'
          - type: 'null'
        additionalFields:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalField'
        overrideIcon:
          type:
          - string
          - 'null'
        overrideDisplayableName:
          type:
          - string
          - 'null'
        overrideSupportedActions:
          type:
          - array
          - 'null'
          items:
            type: string
        type:
          type: string
          enum:
          - SCENARIO_CREATED
          - SCENARIO_ARCHIVED
          - SCENARIO_UNARCHIVED
          - SCENARIO_DEPLOYED
          - SCENARIO_PAUSED
          - SCENARIO_CANCELED
          - SCENARIO_MODIFIED
          - SCENARIO_NAME_CHANGED
          - COMMENT_ADDED
          - ATTACHMENT_ADDED
          - CHANGED_PROCESSING_MODE
          - INCOMING_MIGRATION
          - OUTGOING_MIGRATION
          - PERFORMED_SINGLE_EXECUTION
          - PERFORMED_SCHEDULED_EXECUTION
          - AUTOMATIC_UPDATE
          - CUSTOM_ACTION
    ScenarioActivityActionMetadata:
      title: ScenarioActivityActionMetadata
      type: object
      required:
      - id
      - displayableName
      - icon
      properties:
        id:
          type: string
        displayableName:
          type: string
        icon:
          type: string
    ScenarioActivityAttachment:
      title: ScenarioActivityAttachment
      type: object
      required:
      - file
      - filename
      - lastModifiedBy
      - lastModifiedAt
      properties:
        file:
          $ref: '#/components/schemas/ScenarioActivityAttachmentFile'
        filename:
          type: string
        lastModifiedBy:
          type: string
        lastModifiedAt:
          type: string
          format: date-time
    ScenarioActivityAttachmentFile:
      title: ScenarioActivityAttachmentFile
      oneOf:
      - $ref: '#/components/schemas/Available1'
      - $ref: '#/components/schemas/Deleted'
      discriminator:
        propertyName: status
        mapping:
          AVAILABLE: '#/components/schemas/Available1'
          DELETED: '#/components/schemas/Deleted'
    ScenarioActivityComment:
      title: ScenarioActivityComment
      type: object
      required:
      - content
      - lastModifiedBy
      - lastModifiedAt
      properties:
        content:
          $ref: '#/components/schemas/ScenarioActivityCommentContent'
        lastModifiedBy:
          type: string
        lastModifiedAt:
          type: string
          format: date-time
    ScenarioActivityCommentContent:
      title: ScenarioActivityCommentContent
      oneOf:
      - $ref: '#/components/schemas/Available'
      - $ref: '#/components/schemas/NotAvailable'
      discriminator:
        propertyName: status
        mapping:
          AVAILABLE: '#/components/schemas/Available'
          NOT_AVAILABLE: '#/components/schemas/NotAvailable'
    ScenarioActivityMetadata:
      title: ScenarioActivityMetadata
      type: object
      required:
      - type
      - displayableName
      - icon
      properties:
        type:
          type: string
        displayableName:
          type: string
        icon:
          type: string
        supportedActions:
          type: array
          items:
            type: string
    ScenarioAttachments:
      title: ScenarioAttachments
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    ScenarioLabels:
      title: ScenarioLabels
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
    ScenarioLabelsValidationRequestDto:
      title: ScenarioLabelsValidationRequestDto
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
    ScenarioLabelsValidationResponseDto:
      title: ScenarioLabelsValidationResponseDto
      type: object
      properties:
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ScenarioParameters:
      title: ScenarioParameters
      type: object
      required:
      - processingMode
      - category
      - engineSetupName
      properties:
        processingMode:
          type: string
        category:
          type: string
        engineSetupName:
          type: string
    ScenarioParametersCombinationWithEngineErrors:
      title: ScenarioParametersCombinationWithEngineErrors
      type: object
      required:
      - engineSetupErrors
      properties:
        combinations:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioParameters'
        engineSetupErrors:
          $ref: '#/components/schemas/Map_EngineSetupName_List_String'
    ScenarioUsageData:
      title: ScenarioUsageData
      type: object
      required:
      - nodeId
      properties:
        nodeId:
          type: string
    ServiceRef:
      title: ServiceRef
      type: object
      required:
      - id
      properties:
        id:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
    SimpleParameterEditor:
      title: SimpleParameterEditor
      oneOf:
      - $ref: '#/components/schemas/BoolParameterEditor'
      - $ref: '#/components/schemas/CronParameterEditor'
      - $ref: '#/components/schemas/DateParameterEditor'
      - $ref: '#/components/schemas/DateTimeParameterEditor'
      - $ref: '#/components/schemas/DictParameterEditor'
      - $ref: '#/components/schemas/DurationParameterEditor'
      - $ref: '#/components/schemas/FixedValuesParameterEditor'
      - $ref: '#/components/schemas/FixedValuesWithIconParameterEditor'
      - $ref: '#/components/schemas/FixedValuesWithRadioParameterEditor'
      - $ref: '#/components/schemas/JsonParameterEditor'
      - $ref: '#/components/schemas/PeriodParameterEditor'
      - $ref: '#/components/schemas/SpelTemplateParameterEditor'
      - $ref: '#/components/schemas/SqlParameterEditor'
      - $ref: '#/components/schemas/StringParameterEditor'
      - $ref: '#/components/schemas/TabularTypedDataEditor'
      - $ref: '#/components/schemas/TextareaParameterEditor'
      - $ref: '#/components/schemas/TimeParameterEditor'
    SingleTypingResult:
      title: SingleTypingResult
      oneOf:
      - $ref: '#/components/schemas/TypedClass'
      - $ref: '#/components/schemas/TypedDict'
      - $ref: '#/components/schemas/TypedObjectTypingResult'
      - $ref: '#/components/schemas/TypedObjectWithValue'
      - $ref: '#/components/schemas/TypedTaggedValue'
    SinkRef:
      title: SinkRef
      type: object
      required:
      - typ
      properties:
        typ:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
    SourceRef:
      title: SourceRef
      type: object
      required:
      - typ
      properties:
        typ:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
    SpelTemplateParameterEditor:
      title: SpelTemplateParameterEditor
      type: object
    SqlParameterEditor:
      title: SqlParameterEditor
      type: object
    StatisticDto:
      title: StatisticDto
      type: object
      required:
      - name
      properties:
        name:
          $ref: '#/components/schemas/StatisticName'
    StatisticName:
      title: StatisticName
      type: string
      enum:
      - SEARCH_SCENARIOS_BY_NAME
      - FILTER_SCENARIOS_BY_STATUS
      - FILTER_SCENARIOS_BY_PROCESSING_MODE
      - FILTER_SCENARIOS_BY_CATEGORY
      - FILTER_SCENARIOS_BY_AUTHOR
      - FILTER_SCENARIOS_BY_OTHER
      - SORT_SCENARIOS_BY_SORT_OPTION
      - SEARCH_COMPONENTS_BY_NAME
      - FILTER_COMPONENTS_BY_GROUP
      - FILTER_COMPONENTS_BY_PROCESSING_MODE
      - FILTER_COMPONENTS_BY_CATEGORY
      - FILTER_COMPONENTS_BY_MULTIPLE_CATEGORIES
      - FILTER_COMPONENTS_BY_USAGES
      - CLICK_COMPONENT_USAGES
      - SEARCH_COMPONENT_USAGES_BY_NAME
      - FILTER_COMPONENT_USAGES_BY_STATUS
      - FILTER_COMPONENT_USAGES_BY_CATEGORY
      - FILTER_COMPONENT_USAGES_BY_AUTHOR
      - FILTER_COMPONENT_USAGES_BY_OTHER
      - CLICK_SCENARIO_FROM_COMPONENT_USAGES
      - CLICK_GLOBAL_METRICS_TAB
      - CLICK_ACTION_DEPLOY
      - CLICK_ACTION_METRICS
      - CLICK_VIEW_ZOOM_IN
      - CLICK_VIEW_ZOOM_OUT
      - CLICK_VIEW_RESET
      - CLICK_EDIT_UNDO
      - CLICK_EDIT_REDO
      - CLICK_EDIT_COPY
      - CLICK_EDIT_PASTE
      - CLICK_EDIT_DELETE
      - CLICK_EDIT_LAYOUT
      - CLICK_SCENARIO_PROPERTIES
      - CLICK_SCENARIO_COMPARE
      - CLICK_SCENARIO_MIGRATE
      - CLICK_SCENARIO_IMPORT
      - CLICK_SCENARIO_JSON
      - CLICK_SCENARIO_PDF
      - CLICK_SCENARIO_ARCHIVE
      - CLICK_TEST_GENERATED
      - CLICK_TEST_ADHOC
      - CLICK_TEST_FROM_FILE
      - CLICK_TEST_GENERATE_FILE
      - CLICK_TEST_HIDE
      - CLICK_MORE_SCENARIO_DETAILS
      - CLICK_EXPAND_PANEL
      - CLICK_COLLAPSE_PANEL
      - CLICK_SCENARIO_ACTIVITIES_ADD_ATTACHMENT
      - CLICK_SCENARIO_ACTIVITIES_ADD_COMMENT
      - CLICK_SCENARIO_ACTIVITIES_ADD_COMMENT_TO_ACTIVITY
      - CLICK_SCENARIO_ACTIVITIES_COMPARE
      - CLICK_SCENARIO_ACTIVITIES_DOWNLOAD_ATTACHMENT
      - CLICK_SCENARIO_ACTIVITIES_DELETE_ATTACHMENT
      - CLICK_SCENARIO_ACTIVITIES_DELETE_COMMENT
      - CLICK_SCENARIO_ACTIVITIES_EDIT_COMMENT
      - CLICK_SCENARIO_ACTIVITIES_OPEN_VERSION
      - MOVE_TOOLBAR_PANEL
      - SEARCH_NODES_IN_SCENARIO
      - SEARCH_COMPONENTS_IN_SCENARIO
      - CLICK_OLDER_VERSION
      - CLICK_NEWER_VERSION
      - CLICK_NODE_DOCUMENTATION
      - CLICK_COMPONENTS_TAB
      - CLICK_SCENARIO_SAVE
      - CLICK_TEST_COUNTS
      - CLICK_SCENARIO_CANCEL
      - CLICK_SCENARIO_ARCHIVE_TOGGLE
      - CLICK_SCENARIO_UNARCHIVE
      - CLICK_SCENARIO_CUSTOM_ACTION
      - CLICK_SCENARIO_CUSTOM_LINK
      - DOUBLE_CLICK_RANGE_SELECT_NODES
      - KEYBOARD_AND_CLICK_RANGE_SELECT_NODES
      - KEYBOARD_COPY_NODE
      - KEYBOARD_PASTE_NODE
      - KEYBOARD_CUT_NODE
      - KEYBOARD_SELECT_ALL_NODES
      - KEYBOARD_REDO_SCENARIO_CHANGES
      - KEYBOARD_UNDO_SCENARIO_CHANGES
      - KEYBOARD_DELETE_NODES
      - KEYBOARD_DESELECT_ALL_NODES
      - KEYBOARD_FOCUS_SEARCH_NODE_FIELD
    StatisticUrlResponseDto:
      title: StatisticUrlResponseDto
      type: object
      properties:
        urls:
          type: array
          items:
            type: string
    Status:
      title: Status
      type: string
      enum:
      - OK
    Status1:
      title: Status
      type: string
      enum:
      - ERROR
    StickyNote:
      title: StickyNote
      type: object
      required:
      - noteId
      - content
      - layoutData
      - color
      - dimensions
      - editedBy
      - editedAt
      properties:
        noteId:
          type: integer
          format: int64
        content:
          type: string
        layoutData:
          $ref: '#/components/schemas/LayoutData'
        color:
          type: string
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        targetEdge:
          type:
          - string
          - 'null'
        editedBy:
          type: string
        editedAt:
          type: string
          format: date-time
    StickyNoteAddRequest:
      title: StickyNoteAddRequest
      type: object
      required:
      - scenarioVersionId
      - content
      - layoutData
      - color
      - dimensions
      properties:
        scenarioVersionId:
          type: integer
          format: int64
        content:
          type: string
        layoutData:
          $ref: '#/components/schemas/LayoutData'
        color:
          type: string
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        targetEdge:
          type:
          - string
          - 'null'
    StickyNoteUpdateRequest:
      title: StickyNoteUpdateRequest
      type: object
      required:
      - noteId
      - scenarioVersionId
      - content
      - layoutData
      - color
      - dimensions
      properties:
        noteId:
          type: integer
          format: int64
        scenarioVersionId:
          type: integer
          format: int64
        content:
          type: string
        layoutData:
          $ref: '#/components/schemas/LayoutData'
        color:
          type: string
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        targetEdge:
          type:
          - string
          - 'null'
    StringParameterEditor:
      title: StringParameterEditor
      type: object
    SwitchDefault:
      title: SwitchDefault
      type: object
    TabularDataDefinitionParserErrorDetails:
      title: TabularDataDefinitionParserErrorDetails
      type: object
      properties:
        cellErrors:
          type: array
          items:
            $ref: '#/components/schemas/CellError'
        columnDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ColumnDefinition'
    TabularTypedDataEditor:
      title: TabularTypedDataEditor
      type: object
    TestSourceParameters:
      title: TestSourceParameters
      type: object
      required:
      - sourceId
      - parameterExpressions
      properties:
        sourceId:
          type: string
        parameterExpressions:
          $ref: '#/components/schemas/Map_ParameterName_Expression'
    TestingCapabilities:
      title: TestingCapabilities
      type: object
      required:
      - canBeTested
      - canGenerateTestData
      - canTestWithForm
      properties:
        canBeTested:
          type: boolean
        canGenerateTestData:
          type: boolean
        canTestWithForm:
          type: boolean
    TextareaParameterEditor:
      title: TextareaParameterEditor
      type: object
    TimeParameterEditor:
      title: TimeParameterEditor
      type: object
    TypedClass:
      title: TypedClass
      type: object
      required:
      - type
      - refClazzName
      properties:
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types1'
        refClazzName:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/TypingResult'
    TypedDict:
      title: TypedDict
      type: object
      required:
      - type
      - dict
      properties:
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types2'
        dict:
          $ref: '#/components/schemas/Dict'
    TypedNull:
      title: TypedNull
      type: object
      required:
      - type
      properties:
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types6'
        refClazzName:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/TypingResult'
    TypedObjectTypingResult:
      title: TypedObjectTypingResult
      type: object
      required:
      - type
      - fields
      - refClazzName
      properties:
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types3'
        fields:
          $ref: '#/components/schemas/Map_TypingResult'
        refClazzName:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/TypingResult'
    TypedObjectWithValue:
      title: TypedObjectWithValue
      type: object
      required:
      - value
      - type
      - refClazzName
      properties:
        value: {}
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types4'
        refClazzName:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/TypingResult'
    TypedTaggedValue:
      title: TypedTaggedValue
      type: object
      required:
      - tag
      - type
      properties:
        tag:
          type: string
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types5'
    TypedUnion:
      title: TypedUnion
      type: object
      required:
      - type
      - union
      properties:
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types7'
        union:
          type: array
          items:
            $ref: '#/components/schemas/TypingResult'
    Types:
      title: Types
      type: string
      enum:
      - Unknown
    Types1:
      title: Types
      type: string
      enum:
      - TypedClass
    Types2:
      title: Types
      type: string
      enum:
      - TypedDict
    Types3:
      title: Types
      type: string
      enum:
      - TypedObjectTypingResult
    Types4:
      title: Types
      type: string
      enum:
      - TypedObjectWithValue
    Types5:
      title: Types
      type: string
      enum:
      - TypedTaggedValue
    Types6:
      title: Types
      type: string
      enum:
      - TypedNull
    Types7:
      title: Types
      type: string
      enum:
      - TypedUnion
    TypingResult:
      title: TypingResult
      oneOf:
      - $ref: '#/components/schemas/TypedClass'
      - $ref: '#/components/schemas/TypedDict'
      - $ref: '#/components/schemas/TypedNull'
      - $ref: '#/components/schemas/TypedObjectTypingResult'
      - $ref: '#/components/schemas/TypedObjectWithValue'
      - $ref: '#/components/schemas/TypedTaggedValue'
      - $ref: '#/components/schemas/TypedUnion'
      - $ref: '#/components/schemas/Unknown'
    UIParameter:
      title: UIParameter
      type: object
      required:
      - name
      - typ
      - editor
      - defaultValue
      - additionalVariables
      - branchParam
      - label
      properties:
        name:
          type: string
        typ:
          oneOf:
          - $ref: '#/components/schemas/TypedClass'
          - $ref: '#/components/schemas/TypedDict'
          - $ref: '#/components/schemas/TypedNull'
          - $ref: '#/components/schemas/TypedObjectTypingResult'
          - $ref: '#/components/schemas/TypedObjectWithValue'
          - $ref: '#/components/schemas/TypedTaggedValue'
          - $ref: '#/components/schemas/TypedUnion'
          - $ref: '#/components/schemas/Unknown'
        editor:
          $ref: '#/components/schemas/ParameterEditor'
        defaultValue:
          $ref: '#/components/schemas/Expression'
        additionalVariables:
          $ref: '#/components/schemas/Map_TypingResult'
        variablesToHide:
          type: array
          uniqueItems: true
          items:
            type: string
        branchParam:
          type: boolean
        hintText:
          type:
          - string
          - 'null'
        label:
          type: string
        requiredParam:
          type:
          - boolean
          - 'null'
    UIValueParameterDto:
      title: UIValueParameterDto
      type: object
      required:
      - name
      - typ
      - expression
      properties:
        name:
          type: string
        typ:
          oneOf:
          - $ref: '#/components/schemas/TypedClass'
          - $ref: '#/components/schemas/TypedDict'
          - $ref: '#/components/schemas/TypedNull'
          - $ref: '#/components/schemas/TypedObjectTypingResult'
          - $ref: '#/components/schemas/TypedObjectWithValue'
          - $ref: '#/components/schemas/TypedTaggedValue'
          - $ref: '#/components/schemas/TypedUnion'
          - $ref: '#/components/schemas/Unknown'
        expression:
          $ref: '#/components/schemas/Expression'
    Unknown:
      title: Unknown
      type: object
      required:
      - type
      properties:
        display:
          type: string
        type:
          $ref: '#/components/schemas/Types'
        refClazzName:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/TypingResult'
    UserDefinedAdditionalNodeFields:
      title: UserDefinedAdditionalNodeFields
      type: object
      properties:
        description:
          type:
          - string
          - 'null'
        layoutData:
          anyOf:
          - $ref: '#/components/schemas/LayoutData'
          - type: 'null'
    ValidationError:
      title: ValidationError
      type: object
      required:
      - label
      properties:
        label:
          type: string
        messages:
          type: array
          items:
            type: string
    ValueInputWithDictEditor:
      title: ValueInputWithDictEditor
      type: object
      required:
      - dictId
      - allowOtherValue
      properties:
        dictId:
          type: string
        allowOtherValue:
          type: boolean
    ValueInputWithFixedValuesProvided:
      title: ValueInputWithFixedValuesProvided
      type: object
      required:
      - allowOtherValue
      properties:
        fixedValuesList:
          type: array
          items:
            $ref: '#/components/schemas/FixedExpressionValue'
        allowOtherValue:
          type: boolean
    Variable:
      title: Variable
      type: object
      required:
      - id
      - type
      - varName
      - value
      properties:
        id:
          type: string
        additionalFields:
          anyOf:
          - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
          - type: 'null'
        type:
          $ref: '#/components/schemas/NodeTypes13'
        varName:
          type: string
        value:
          $ref: '#/components/schemas/Expression'
    VariableBuilder:
      title: VariableBuilder
      type: object
      required:
      - id
      - type
      - varName
      properties:
        additionalFields:
          anyOf:
          - $ref: '#/components/schemas/UserDefinedAdditionalNodeFields'
          - type: 'null'
        branchParametersTemplate:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        id:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        type:
          $ref: '#/components/schemas/NodeTypes14'
        varName:
          type: string
  securitySchemes:
    httpAuth:
      type: http
      scheme: basic
