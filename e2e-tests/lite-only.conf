# This config contains sample configuration that allows for easier experiments with more advanced Nussknacker features
# In particular, it can be used during development and/or Nussknacker testing
# To run it, one must use Nussknacker distribution which contains managementSample and requestResponseSample (e.g. staging-latest docker images)
# This config is exposed in development dist and locally in development (se ui/server/runServer.sh)
environment: "local"

categoriesConfig: {
  "LiteStreaming": "lite-streaming-embedded"
}

modelDir: "model"
modelDir: ${?MODEL_DIR}
componentsDir: "components"
componentsDir: ${?COMPONENTS}
liteComponentsDir: ${componentsDir}"/lite"


scenarioTypes {
  "lite-streaming-embedded": {
    deploymentConfig {
      type: "lite-streaming-embedded"
      metrics {
        host: "local",
        environment: ${environment},
        influx {
          url: ${?INFLUXDB_URL}"/write",
          database: "esp",
        }
      }
    }
    modelConfig {
      classPath: [${modelDir}/"liteModel.jar", ${componentsDir}"/lite/liteBase.jar", ${componentsDir}"/lite/liteKafka.jar", ${componentsDir}"/openapi.jar", ${componentsDir}"/sql.jar"]
      categories: ["LiteStreaming"]

      components.kafka.enabled: true

      //TODO: we have to decide if Kafka/ExceptionHandlingConfig has
      kafka {
        kafkaAddress: ${?KAFKA_ADDRESS}
        kafkaProperties {
          "schema.registry.url": ${?SCHEMA_REGISTRY_URL}
        }
      }
      exceptionHandlingConfig: {
        topic: "errors"
      }
    }
  }
}

grafanaUrl: "/grafana"
grafanaUrl: ${?GRAFANA_URL}

metricsSettings {
  url: ${grafanaUrl}"/d/$dashboard?theme=dark&var-scenarioName=$scenarioName&var-env="${environment}
  defaultDashboard: "nussknacker-scenario"
  scenarioTypeToDashboard: {
    "lite-streaming-embedded": "nussknacker-lite-scenario"
  }
}

environmentAlert: {
  content: "DEVELOPMENT ENVIRONMENT"
  cssClass: "indicator-green"
}

componentsAppUrl: "/submodules/components/remoteEntry.js"
componentsAppUrl: ${?NU_FE_COMPONENTS_URL}

tabs = ${tabs} [
  {title: "Metrics", type: "IFrame", url: ${grafanaUrl}"/dashboard/db/"${metricsSettings.defaultDashboard}"?theme=dark&var-env="${environment}, id: "metrics"},
  {title: "Admin", type: "Local", url: "/admin", id: "admin", requiredPermission: "AdminTab"},
  {title: "Components", type: "Remote", url: "nu_components/list@"${componentsAppUrl}, id: "components"}
]

secondaryEnvironmentUri: "http://localhost:8080/api"
secondaryEnvironmentUri: ${?SECONADRY_ENVIRONMENT_URI}
secondaryEnvironment {
  user: "admin"
  password: "admin"
  targetEnvironmentId: "development"
  remoteConfig: {
    uri: ${secondaryEnvironmentUri}
  }
}

commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

countsSettings {
  influxUrl: "http://influxdb:8086/query"
  influxUrl: ${?INFLUXDB_URL}"/query"
  database: "esp"
}

developmentMode: true
developmentMode: ${?DEVELOPMENT_MODE}
