storageDir: ./storage
storageDir: ${?STORAGE_DIR}

dbFilePath: ${storageDir}"/db"
dbFilePath: ${?DB_FILE_PATH}

dbName: "db"
dbName: ${?DB_NAME}

dbUser: "sa"
dbUser: ${?DB_USER}

dbPassword: ""
dbPassword: ${?DB_PASSWORD}

dbUrl: "jdbc:hsqldb:hsql://localhost/db;sql.syntax_ora=true"
dbUrl: ${?DB_URL}

dbDriver: "org.hsqldb.jdbc.JDBCDriver"
dbDriver: ${?DB_DRIVER}

dbConnectionTimeout: 30000
dbConnectionTimeout: ${?DB_CONNECTION_TIMEOUT}

jdbcServerEnabled: true
jdbcServerEnabled: ${?JDBC_SERVER_ENABLED}

jdbcServer: {
  enabled: ${jdbcServerEnabled}
  dbFilePath: ${dbFilePath}
  dbName: ${dbName}
  user: ${dbUser}
  password: ${dbPassword}
}

db {
  url: ${dbUrl}
  driver: ${dbDriver}
  password: ${dbPassword}
  user: ${dbUser}
  connectionTimeout: ${dbConnectionTimeout}
}

akka {
  http {
    server {
      parsing.max-content-length = 300000000 #300MB
      server.parsing.max-uri-length = 200000
      # Longer than default 20 sec mainly for invoking tests on processes
      request-timeout = 1 minute
    }
  }
}

# Authentication configuration
authentication: {
  method: "BasicAuth"
  method: ${?AUTHENTICATION_METHOD}
  clientSecret: ${?OAUTH2_CLIENT_SECRET}
  clientId: ${?OAUTH2_CLIENT_ID}
  authorizeUri: ${?OAUTH2_AUTHORIZE_URI}
  redirectUri: ${?OAUTH2_REDIRECT_URI}
  accessTokenUri: ${?OAUTH2_ACCESS_TOKEN_URI}
  profileUri: ${?OAUTH2_PROFILE_URI}
  implicitGrantEnabled: ${?OAUTH2_IMPLICIT_GRANT_ENABLED}
  accessTokenParams: {
    grant_type: ${?OAUTH2_GRANT_TYPE}
  }
  authorizeParams {
    response_type: ${?OAUTH2_RESPONSE_TYPE}
    scope: ${?OAUTH2_SCOPE}
  }
  headers {
    Accept: ${?AUTHENTICATION_HEADERS_ACCEPT}
  }
  usersFile: ${AUTHENTICATION_USERS_FILE}
}

commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

developmentMode: ${?DEVELOPMENT_MODE}

attachmentsPath: ${storageDir}"/attachments"

proxyUrl: "http://localhost:8081"
proxyUrl: ${?PROXY_URL}

grafanaUrl: ${proxyUrl}"/grafana"
grafanaUrl: ${?GRAFANA_URL}

kibanaUrl: ${proxyUrl}"/kibana/"
kibanaUrl: ${?KIBANA_URL}

#TODO: Figure out the defaults. It's tricky part, because influxUrl and grafanaUrl can point to same location, but one link is used
#from browser and the other - from UI backend and in docker/nginx setups they *will* be different...
countsUrl: ${grafanaUrl}"/api/datasources/proxy/1/query"
countsUrl: ${?COUNTS_URL}

countsSettings {
  user: "admin"
  password: "admin"
  influxUrl: ${countsUrl}
}

kibanaSettings {
  url: ${kibanaUrl}
}

# Base streaming configuration
flinkRestUrl: "http://jobmanager:8081"
flinkRestUrl: ${?FLINK_REST_URL}

flinkQueryableStateProxyUrl: "taskmanager:9069"
flinkQueryableStateProxyUrl: ${?FLINK_QUERYABLE_STATE_PROXY_URL}

flinkEngineConfig {
  jobManagerTimeout: 1m
  type: "flinkStreaming"
  restUrl: ${flinkRestUrl}
  queryableStateProxyUrl: ${flinkQueryableStateProxyUrl}
}

signalsTopic: "nk.signals"
signalsTopic: ${?SIGNALS_TOPIC}

kafkaAddress: "kafka:9092"
kafkaAddress: ${?KAFKA_ADDRESS}

// TODO: This won't work when nk is run outside container, it should be possible to add additional url
schemaRegistryUrl: "http://schemaregistry:8081"
schemaRegistryUrl: ${?SCHEMA_REGISTRY_URL}

streamingModelConfig {
  signals {
    topic: ${signalsTopic}
  }

  timeout: 10s
  restartInterval: 10s
  checkpointConfig {
      checkpointInterval: 10m
  }

  globalParameters {
    explicitUidInStatefulOperators: true
  }

  kafka {
    kafkaAddress: ${kafkaAddress}
    kafkaProperties {
      "schema.registry.url": ${schemaRegistryUrl}
    }
    consumerGroupNamingStrategy: processId-nodeId
  }

  asyncExecutionConfig {
    bufferSize: 200
    workers: 8
    defaultUseAsyncInterpretation: true
  }
}
