storageDir: ./storage
storageDir: ${?STORAGE_DIR}

jdbcServer {
  dbFilePath: ${storageDir}"/db"
  dbName: "db"
  user: "sa"
  password: ""
}

db {
  url: "jdbc:hsqldb:hsql://localhost/db;sql.syntax_ora=true"
  driver: "org.hsqldb.jdbc.JDBCDriver"
  password: ""
  user: "sa"
  connectionTimeout: 30000
}

akka {
  http {
    server {
      parsing.max-content-length = 300000000 #300MB
      server.parsing.max-uri-length = 200000
      # Longer than default 20 sec mainly for invoking tests on processes
      request-timeout = 1 minute
    }
  }
}

# Authentication configuration
authentication: {
  method: "BasicAuth"
  method: ${?AUTHENTICATION_METHOD}
  clientSecret: ${?OAUTH2_CLIENT_SECRET}
  clientId: ${?OAUTH2_CLIENT_ID}
  authorizeUri: ${?OAUTH2_AUTHORIZE_URI}
  redirectUri: ${?OAUTH2_REDIRECT_URI}
  accessTokenUri: ${?OAUTH2_ACCESS_TOKEN_URI}
  profileUri: ${?OAUTH2_PROFILE_URI}
  accessTokenParams: {
    grant_type: ${?OAUTH2_GRANT_TYPE}
  }
  authorizeParams {
    response_type: ${?OAUTH2_RESPONSE_TYPE}
    scope: ${?OAUTH2_SCOPE}
  }
  headers {
    Accept: ${?AUTHENTICATION_HEADERS_ACCEPT}
  }
  usersFile: ${AUTHENTICATION_USERS_FILE}
}

commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

developmentMode: ${?DEVELOPMENT_MODE}

attachmentsPath: ${storageDir}"/attachments"

proxyUrl: "http://localhost:8081"
proxyUrl: ${?PROXY_URL}

grafanaUrl: ${proxyUrl}"/grafana"
grafanaUrl: ${?GRAFANA_URL}

kibanaUrl: ${proxyUrl}"/kibana/"
kibanaUrl: ${?KIBANA_URL}

countsSettings {
  user: "admin"
  password: "admin"
  influxUrl: ${grafanaUrl}"/api/datasources/proxy/1/query"
}

kibanaSettings {
  url: ${kibanaUrl}
}

# Base streaming configuration
flinkRestUrl: "http://jobmanager:8081"
flinkRestUrl: ${?FLINK_REST_URL}

flinkQueryableStateProxyUrl: "taskmanager:9069"
flinkQueryableStateProxyUrl: ${?FLINK_QUERYABLE_STATE_PROXY_URL}

flinkEngineConfig {
  jobManagerTimeout: 1m
  type: "flinkStreaming"
  restUrl: ${flinkRestUrl}
  queryableStateProxyUrl: ${flinkQueryableStateProxyUrl}
}

signalsTopic: "nk.signals"
signalsTopic: ${?SIGNALS_TOPIC}

kafkaAddress: "kafka:9092"
kafkaAddress: ${?KAFKA_ADDRESS}

streamingModelConfig {
  signals {
    topic: ${signalsTopic}
  }

  timeout: 10s
  restartInterval: 10s
  checkpointInterval: 10m

  kafka {
    kafkaAddress: ${kafkaAddress}
  }

  asyncExecutionConfig {
    bufferSize: 200
    parallelismMultiplier: 2
  }
}