# This file contains sensible defaults for simple, recommended Nussknacker deployment - with one generic model, deployed on Flink
# In most cases it should be possible to override parts of this configuration by providing
# additional config file (see examples/installation/designer/application-customizations.conf)

environment: "local"

scenarioTypes {
  "streaming" {
    deploymentConfig {
      type: "flinkStreaming"
      jobManagerTimeout: 1m
      restUrl: ${?FLINK_REST_URL}
    }
    modelConfig {
      classPath: ["model/defaultModel.jar", "model/flinkExecutor.jar", "components/flink", "components/common", "flink-dropwizard-metrics-deps/"]
      rocksDB {
        enable: ${?FLINK_ROCKSDB_ENABLE}
      }
      components.kafka {
        config: ${kafkaConfig}
      }
      # For the purpose of deduplication of components on the components tab
      componentsUiConfig {
        source-kafka {
          componentId: source-kafka
        }
        sink-kafka {
          componentId: sink-kafka
        }
      }
    }
    category: "Default"
  }
  "streaming-lite-embedded" {
    deploymentConfig {
      type: "lite-embedded"
      mode: "streaming"
      metrics {
        instanceId: "local",
        environment: ${environment},
        influx {
          url: ${?INFLUXDB_URL}"/write",
          database: "nussknacker_metrics",
          database: ${?INFLUXDB_DATABASE}
        }
      }
    }
    modelConfig {
      classPath: ["model/defaultModel.jar", "components/lite/liteBase.jar", "components/lite/liteKafka.jar", "components/common"]
      kafka: ${kafkaConfig}
      exceptionHandlingConfig {
        topic: "errors"
      }
      # For the purpose of deduplication of components on the components tab
      componentsUiConfig {
        source-kafka {
          componentId: source-kafka
        }
        sink-kafka {
          componentId: sink-kafka
        }
      }
    }
    category: "Default"
  }
  "request-response-embedded": {
    deploymentConfig {
      type: "lite-embedded"
      mode: "request-response"
      http {
        port: 8181
        port: ${?REQUEST_RESPONSE_PORT}
        interface: ${?REQUEST_RESPONSE_INTERFACE}
      }
      metrics {
        instanceId: "local",
        environment: ${environment},
        influx {
          url: ${?INFLUXDB_URL}"/write",
          database: "nussknacker_metrics",
          database: ${?INFLUXDB_DATABASE}
        }
      }
    }
    modelConfig {
      classPath: ["model/defaultModel.jar", "components/lite/liteRequestResponse.jar", "components/lite/liteBase.jar", "components/common"]
    }
    category: "Default"
  }
}

kafkaConfig {
  kafkaProperties {
    "bootstrap.servers": ${?KAFKA_ADDRESS}
    "schema.registry.url": ${?SCHEMA_REGISTRY_URL}
    "auto.offset.reset": ${?KAFKA_AUTO_OFFSET_RESET}
  }
}

scenarioLabelSettings: {
  validationRules = [
    {
      validationPattern: "^[a-zA-Z0-9-_]+$",
      validationMessage: "Scenario label can contain only alphanumeric characters, '-' and '_'"
    }
    {
      validationPattern: "^.{1,20}$"
      validationMessage: "Scenario label can contain up to 20 characters"
    }
  ]
}

grafanaUrl: "/grafana"
grafanaUrl: ${?GRAFANA_URL}

metricsSettings {
  url: ${grafanaUrl}"/d/$dashboard?theme=dark&var-scenarioName=$scenarioName&var-env="${environment}
  defaultDashboard: "nussknacker-scenario"
  defaultDashboard: ${?DEFAULT_DASHBOARD}
  scenarioTypeToDashboard: {
    "streaming-lite-embedded": "nussknacker-lite-scenario",
    "request-response-embedded": "nussknacker-request-response-scenario"
  }
}

countsSettings {
  influxUrl: ${?INFLUXDB_URL}/"query"
  database: "nussknacker_metrics"
  database: ${?INFLUXDB_DATABASE}
}
