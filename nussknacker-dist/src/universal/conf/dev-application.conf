# This config contains sample configuration that allows for easier experiments with more advanced Nussknacker features
# In particular, it can be used during development and/or Nussknacker testing
# To run it, one must use Nussknacker distribution which contains managementSample and requestResponseSample (e.g. staging-latest docker images)
# This config is exposed in development dist and locally in development (se ui/server/runServer.sh)
environment: "local"

categoriesConfig: {
  "Default": "streaming"
  "Category1": "streaming-dev"
  "Category2": "streaming-dev"
  "DemoFeatures": "streaming-dev"
  "ServerRestApi": "request-response"
  "LiteStreaming": "lite-streaming-embedded"
}

managementModelDir: "model"
managementModelDir: ${?MANAGEMENT_MODEL_DIR}
genericModelDir: "model"
genericModelDir: ${?GENERIC_MODEL_DIR}
requestResponseModelDir: "model"
requestResponseModelDir: ${?REQUEST_RESPONSE_MODEL_DIR}
liteModelDir: "model"
liteModelDir: ${?LITE_MODEL_DIR}
baseComponentDir: "components"
baseComponentDir: ${?BASE_COMPONENT_DIR}
baseEngineComponentDir: "components"
baseEngineComponentDir: ${?BASE_ENGINE_COMPONENT_DIR}
kafkaComponentDir: "components"
kafkaComponentDir: ${?KAFKA_COMPONENT_DIR}
openApiComponentDir: "components"
openApiComponentDir: ${?OPENAPI_COMPONENT_DIR}
sqlComponentDir: "components"
sqlComponentDir: ${?SQL_COMPONENT_DIR}


requestResponseManagementUrl: "http://localhost:8070"
requestResponseManagementUrl: ${?REQUEST_RESPONSE_MANAGMENT_URL}

flinkDeploymentConfig {
  type: "flinkStreaming"
  restUrl: "http://jobmanager:8081"
  restUrl: ${?FLINK_REST_URL}
  queryableStateProxyUrl: "taskmanager:9069"
  queryableStateProxyUrl: ${?FLINK_QUERYABLE_STATE_PROXY_URL}
  shouldVerifyBeforeDeploy: ${?FLINK_SHOULD_VERIFY_BEFORE_DEPLOY}
}

sqlEnricherDbPool {
  driverClassName: "org.postgresql.Driver"
  url: "jdbc:postgresql://"${SQL_ENRICHER_URL}"/world-db?currentSchema=public"
  username: "world"
  password: "world123"
}

scenarioTypes {
  "streaming": {
    deploymentConfig: ${flinkDeploymentConfig}
    modelConfig: {
      classPath: [ ${genericModelDir}"/genericModel.jar", ${baseComponentDir}"/baseComponents.jar", ${kafkaComponentDir}"/kafkaComponents.jar", ${openApiComponentDir}"/openapi.jar", ${sqlComponentDir}"/sql.jar"]
      rocksDB: {
        enable: ${?FLINK_ROCKSDB_ENABLE}
      }

      # This is a copy-paste of https://github.com/TouK/nussknacker-quickstart/blob/main/nussknacker/nussknacker.conf
      # It is copied to avoid dependencies between those projects and to be able to add here some dev env changes
      # that would obfuscate quickstart setup (mainly OPENAPI_COMPONENT_DIR and SQL_COMPONENT_DIR env vars)
      components.openAPI {
        url: ${OPENAPI_SERVICE_URL}"/swagger"
        rootUrl: ${OPENAPI_SERVICE_URL}
        categories: ["Default"]
      }

      components.databaseEnricher {
        categories: ["Default"]
        config: {
          databaseQueryEnricher {
            name: "db-query"
            dbPool: ${sqlEnricherDbPool}
          }
          databaseLookupEnricher {
            name: "db-lookup"
            dbPool: ${sqlEnricherDbPool}
          }
        }
      }
    }
  }
  "streaming-dev": {
    deploymentConfig: ${flinkDeploymentConfig}
    modelConfig: {
      classPath: [ ${managementModelDir}"/managementSample.jar" ]
      rocksDB: {
        enable: true
        enable: ${?FLINK_ROCKSDB_ENABLE}
      }
    }
  }
  "request-response": {
    deploymentConfig {
      type: "requestResponse"
      managementUrl: ${requestResponseManagementUrl}
    }
    modelConfig {
      classPath: [ ${requestResponseModelDir}"/requestResponseSample.jar", ${baseEngineComponentDir}"/baseEngineComponents.jar" ]
    }
  }
  "lite-streaming-embedded": {
    deploymentConfig {
      type: "lite-streaming-embedded"
      metrics.influx: {
        url: ${?INFLUXDB_URL}"/write",
        database: "esp",
        host: "local",
        environment: ${environment},
      }
    }
    modelConfig {
      classPath: [ ${liteModelDir}/"liteModel.jar", ${openApiComponentDir}"/openapi.jar", ${sqlComponentDir}"/sql.jar" ]
      categories: ["LiteStreaming"]
      //FIXME: replace with final components
      components.kafkaSources.enabled: true

      //TODO: we have to decide if Kafka/ExceptionHandlingConfig has
      kafka {
        kafkaAddress: ${?KAFKA_ADDRESS}
        kafkaProperties.retries: 1
      }
      exceptionHandlingConfig: {
        topic: "errors"
      }
    }
  }
}

grafanaUrl: "/grafana"
grafanaUrl: ${?GRAFANA_URL}

metricsSettings {
  url: ${grafanaUrl}"/d/$dashboard?theme=dark&var-processName=$process&var-env="${environment}
  defaultDashboard: "nussknacker-scenario"
  scenarioTypeToDashboard: {
    #Note: currently in demo docker-compose these dashboards do not exist. We keep them here, so
    #one can test if changing dashboard link works, you can add other dashboards locally
    "request-response": "nussknacker-request-response"
  }
}

environmentAlert: {
  content: "DEVELOPMENT ENVIRONMENT"
  cssClass: "indicator-green"
}

componentsAppUrl: "/submodules/components/remoteEntry.js"
componentsAppUrl: ${?NU_FE_COMPONENTS_URL}

tabs = ${tabs} [
  {title: "Metrics", type: "IFrame", url: ${grafanaUrl}"/dashboard/db/"${metricsSettings.defaultDashboard}"?theme=dark&var-env="${environment}, id: "metrics"},
  {title: "Admin", type: "Local", url: "/admin", id: "admin", requiredPermission: "AdminTab"},
  {title: "Components", type: "Remote", url: "nu_components/list@"${componentsAppUrl}, id: "components"}
]

secondaryEnvironmentUri: "http://localhost:8080/api"
secondaryEnvironmentUri: ${?SECONADRY_ENVIRONMENT_URI}
secondaryEnvironment {
  user: "admin"
  password: "admin"
  targetEnvironmentId: "development"
  remoteConfig: {
    uri: ${secondaryEnvironmentUri}
  }
}

scenarioRepositoryLocation: ${storageDir}"/scenarioRepository"

customProcesses: {
  "customProcess1": "pl.touk.custom.NonExistingCustomProcess"
}

commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

countsSettings {
  influxUrl: "http://influxdb:8086/query"
  influxUrl: ${?INFLUXDB_URL}"/query"
  database: "esp"
}

developmentMode: true
developmentMode: ${?DEVELOPMENT_MODE}
