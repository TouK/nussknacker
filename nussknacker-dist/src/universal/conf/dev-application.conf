# This config contains sample configuration that allows for easier experiments with more advanced Nussknacker features
# In particular, it can be used during development and/or Nussknacker testing
# To run it, one must use Nussknacker distribution which contains managementSample and standaloneSample (e.g. staging-latest docker images)
# This config is exposed in development dist and locally in development (se ui/server/runServer.sh)
environment: "local"

categoriesConfig: {
  "Default": "streaming-generic"
  "Category1": "streaming"
  "Category2": "streaming"
  "DemoFeatures": "streaming"
  "ServerRestApi": "request-response"
}

managementModelDir: "model"
managementModelDir: ${?MANAGEMENT_MODEL_DIR}
genericModelDir: "model"
genericModelDir: ${?GENERIC_MODEL_DIR}
standaloneModelDir: "model"
standaloneModelDir: ${?STANDALONE_MODEL_DIR}

standaloneManagmentUrl: "http://localhost:8070"
standaloneManagmentUrl: ${?STANDALONE_MANAGMENT_URL}

flinkDeploymentConfig {
  type: "flinkStreaming"
  restUrl: "http://jobmanager:8081"
  restUrl: ${?FLINK_REST_URL}
  queryableStateProxyUrl: "taskmanager:9069"
  queryableStateProxyUrl: ${?FLINK_QUERYABLE_STATE_PROXY_URL}
}

scenarioTypes {
  "streaming": {
    deploymentConfig: ${flinkDeploymentConfig}
    modelConfig: {
      classPath: [ ${managementModelDir}"/managementSample.jar" ]
      rocksDB: {
        checkpointDataUri: ${?FLINK_ROCKSDB_CHECKPOINT_DATA_URI}
      }
    }
  }
 "streaming-generic": {
    deploymentConfig: ${flinkDeploymentConfig}
    modelConfig: {
      classPath: [ ${genericModelDir}"/genericModel.jar" ]
      rocksDB: {
        checkpointDataUri: ${?FLINK_ROCKSDB_CHECKPOINT_DATA_URI}
      }
    }
  }
  "request-response": {
    deploymentConfig {
      type: "requestResponseStandalone"
      managementUrl: ${standaloneManagmentUrl}
    }
    modelConfig {
      classPath: [ ${standaloneModelDir}"/standaloneSample.jar" ]
    }
  }
}

grafanaUrl: "/grafana"
grafanaUrl: ${?GRAFANA_URL}

metricsSettings {
  url: ${grafanaUrl}"/d/$dashboard?theme=dark&var-processName=$process&var-env="${environment}
  defaultDashboard: "nussknacker-scenario"
  processingTypeToDashboard: {
    #Note: currently in demo docker-compose these dashboards do not exist. We keep them here, so
    #one can test if changing dashboard link works, you can add other dashboards locally
    "request-response": "nussknacker-standalone"
  }
}

environmentAlert: {
  content: "DEVELOPMENT ENVIRONMENT"
  cssClass: "indicator-green"
}

customTabs = [
  {name: "Metrics", url: ${grafanaUrl}"/dashboard/db/"${metricsSettings.defaultDashboard}"?theme=dark&var-env="${environment}, id: "metrics"},
]

secondaryEnvironmentUri: "http://localhost:8080/api"
secondaryEnvironmentUri: ${?SECONADRY_ENVIRONMENT_URI}

secondaryEnvironment {
  user: "admin"
  password: "admin"
  targetEnvironmentId: "development"
  remoteConfig: {
    uri: ${secondaryEnvironmentUri}
    batchSize: 10
  }
}

standaloneEngineProcessLocation: ${STORAGE_DIR}"/standaloneProcesses"

customProcesses: {
  "customProcess1": "pl.touk.custom.NonExistingCustomProcess"
}

commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

countsSettings {
  influxUrl: "http://influxdb:8086/query"
  influxUrl: ${?COUNTS_URL}
  database: "esp"
}

developmentMode: ${?DEVELOPMENT_MODE}
