# This config contains sample configuration that allows for easier experiments with more advanced Nussknacker features
# In particular, it can be used during development and/or Nussknacker testing
# To run it, one must use Nussknacker distribution which contains devModel and requestResponseSample (e.g. staging-latest docker images)
# This config is exposed in development dist and locally in development (se designer/server/runServer.sh)
environment: "local"

categoriesConfig: {
  "Default": "streaming"
  "Category1": "streaming-dev"
  "Category2": "streaming-dev"
  "DemoFeatures": "streaming-dev"
  "Periodic": "periodic-dev"
  "RequestResponse": "request-response-embedded"
  "StreamingLite": "streaming-lite-embedded"
  "StreamingLiteK8s": "streaming-lite-k8s"
  "RequestResponseK8s": "request-response-k8s"
  "DevelopmentTests": "development-tests"
}

flinkDeploymentConfig {
  type: "flinkStreaming"
  restUrl: "http://jobmanager:8081"
  restUrl: ${?FLINK_REST_URL}
  shouldVerifyBeforeDeploy: ${?FLINK_SHOULD_VERIFY_BEFORE_DEPLOY}
}

sqlEnricherDbPool {
  driverClassName: "org.postgresql.Driver"
  url: "jdbc:postgresql://"${SQL_ENRICHER_URL}"/world-db?currentSchema=public"
  username: "world"
  password: "world123"
}

scenarioTypes {
  "streaming": {
    deploymentConfig: ${flinkDeploymentConfig}
    modelConfig: {
      classPath: ["model/defaultModel.jar", "model/flinkExecutor.jar", "components/flink", "components/common"]
      rocksDB: {
        enable: ${?FLINK_ROCKSDB_ENABLE}
      }

      # This is a copy-paste of https://github.com/TouK/nussknacker-quickstart/blob/main/nussknacker/nussknacker.conf
      # It is copied to avoid dependencies between those projects and to be able to add here some dev env changes
      # that would obfuscate quickstart setup (mainly OPENAPI_COMPONENT_DIR and SQL_COMPONENT_DIR env vars)
      components.openAPI {
        url: ${OPENAPI_SERVICE_URL}"/swagger"
        rootUrl: ${OPENAPI_SERVICE_URL}
      }

      components.databaseEnricher {
        config: {
          databaseQueryEnricher {
            name: "db-query"
            dbPool: ${sqlEnricherDbPool}
          }
          databaseLookupEnricher {
            name: "db-lookup"
            dbPool: ${sqlEnricherDbPool}
          }
        }
      }

      components.kafka {
        config: {
          kafkaProperties {
            "bootstrap.servers": ${KAFKA_ADDRESS}
            "schema.registry.url": ${SCHEMA_REGISTRY_URL}
          }
        }
      }
    }
  }
  "streaming-dev": {
    deploymentConfig: ${flinkDeploymentConfig}
    modelConfig: {
      classPath: ["model/devModel.jar", "model/flinkExecutor.jar", "components/flink"]
      rocksDB: {
        enable: true
        enable: ${?FLINK_ROCKSDB_ENABLE}
      }
      componentsUiConfig {
        sendCommunication {
          params {
            Text {
              defaultValue: "'Default value for text'"
            }
          }
          docsUrl: "https://nussknacker.io"
        }
      }
    }
  }
  "periodic-dev": {
    deploymentConfig: {
      type: "dev-periodic"
      restUrl: "http://jobmanager:8081"
      restUrl: ${?FLINK_REST_URL}
      shouldVerifyBeforeDeploy: ${?FLINK_SHOULD_VERIFY_BEFORE_DEPLOY}
      deploymentManager {
        db: ${db},
        db.table: "periodic_flyway_schema_history"
        processingType: streaming,
        jarsDir: ${storageDir}/jars
      }
    }
    modelConfig: {
      classPath: ["model/devModel.jar", "model/flinkExecutor.jar", "components/flink", "components/common"]
      rocksDB: {
        enable: ${?FLINK_ROCKSDB_ENABLE}
      }
      // We turn off checkpoing because it causes that bounded sources wait until first checkpoing even if
      // they finished emitting events. See https://issues.apache.org/jira/browse/FLINK-28386 for details
      checkpointConfig: null
      components.kafka {
        config: {
          kafkaProperties {
            "bootstrap.servers": ${KAFKA_ADDRESS}
            "schema.registry.url": ${SCHEMA_REGISTRY_URL}
          }
        }
      }
    }
  }
  "development-tests": {
    deploymentConfig: {
      type: "development-tests"
    }
    modelConfig: {
      classPath: ["model/devModel.jar", "model/flinkExecutor.jar", "components/flink"]
    }
  }
  "request-response-embedded": {
    deploymentConfig {
      type: "lite-embedded"
      mode: "request-response"
      http {
        port: 8181
        port: ${?REQUEST_RESPONSE_PORT}
        interface: ${?REQUEST_RESPONSE_INTERFACE}
      }
    }
    modelConfig {
      #TODO: handle streaming and rr lite in dirs...
      classPath: ["model/defaultModel.jar", "components/lite/liteRequestResponse.jar", "components/lite/liteBase.jar", "components/common"]

      components {
        databaseEnricher {
          config: {
            databaseQueryEnricher {
              name: "db-query"
              dbPool: ${sqlEnricherDbPool}
            }
            databaseLookupEnricher {
              name: "db-lookup"
              dbPool: ${sqlEnricherDbPool}
            }
          }
        }
        openAPI {
          url: ${OPENAPI_SERVICE_URL}"/swagger"
          rootUrl: ${OPENAPI_SERVICE_URL}
        }
      }
    }
  }
  "streaming-lite-k8s": {
    deploymentConfig {
      type: "lite-k8s"
      mode: "streaming"
      //FIXME: simplify, make it more human-friendly...
      configExecutionOverrides {
        metrics {
          environment: ${environment},
          influx {
            url: "http://influxdb:8086/write",
            database: "esp",
          }
        }
        modelConfig {
          kafka {
            kafkaProperties {
              "bootstrap.servers": "kafka:9092"
              "schema.registry.url": "http://schemaregistry:8081"
            }
          }
        }
      }
    }
    modelConfig {
      #TODO: handle streaming and rr lite in dirs...
      classPath: ["model/defaultModel.jar", "components/lite/liteBase.jar", "components/lite/liteKafka.jar", "componentscommon"]

      kafka {
        kafkaProperties {
          "bootstrap.servers": ${KAFKA_ADDRESS}
          "schema.registry.url": ${SCHEMA_REGISTRY_URL}
        }
      }
      exceptionHandlingConfig: {
        topic: "errors"
      }
    }
  }
  "request-response-k8s": {
    deploymentConfig {
      type: "lite-k8s"
      mode: "request-response"
      //FIXME: simplify, make it more human-friendly...
      configExecutionOverrides {
        metrics {
          environment: ${environment},
          influx {
            url: "http://influxdb:8086/write",
            database: "esp",
          }
        }
      }
    }
    modelConfig {
      classPath: ["model/defaultModel.jar", "components/lite/liteBase.jar", "components/lite/liteRequestResponse.jar", "componentscommon"]
    }
  }
  "streaming-lite-embedded": {
    deploymentConfig {
      type: "lite-embedded"
      mode: "streaming"
      metrics {
        instanceId: "local",
        environment: ${environment},
        influx {
          url: ${?INFLUXDB_URL}"/write",
          database: "esp",
        }
      }
    }
    modelConfig {
      classPath: ["model/defaultModel.jar", "components/lite/liteBase.jar", "components/lite/liteKafka.jar", "components/common"]

      kafka {
        kafkaProperties {
          "bootstrap.servers": ${KAFKA_ADDRESS}
          "schema.registry.url": ${SCHEMA_REGISTRY_URL}
        }
      }
      exceptionHandlingConfig: {
        topic: "errors"
      }
    }
  }

}

grafanaUrl: "/grafana"
grafanaUrl: ${?GRAFANA_URL}

metricsSettings {
  url: ${grafanaUrl}"/d/$dashboard?theme=dark&var-scenarioName=$scenarioName&var-env="${environment}
  defaultDashboard: "nussknacker-scenario"
  scenarioTypeToDashboard: {
    "streaming-lite-embedded": "nussknacker-lite-scenario",
    "streaming-lite-k8s": "nussknacker-lite-scenario",
    "request-response-k8s": "nussknacker-request-response-scenario",
  }
}

environmentAlert: {
  content: "DEVELOPMENT ENVIRONMENT"
  color: "indicator-green"
}

tabs = ${tabs} [
  {title: "Metrics", type: "Local", url: "/metrics", id: "metrics"},
]

componentLinks: [
  {id: "mainNu", title: "MainNu", icon: "/assets/components/CustomNode.svg", url: "https://nussknacker.io/", supportedComponentTypes: ["filter", "split"]},
  {id: "metrics", title: "Metrics", icon: "/assets/components/Filter.svg", url: "/metrics", supportedComponentTypes: ["filter", "split"]}
]

secondaryEnvironmentUri: "http://localhost:8080/api"
secondaryEnvironmentUri: ${?SECONADRY_ENVIRONMENT_URI}
secondaryEnvironment {
  user: "admin"
  password: "admin"
  targetEnvironmentId: "development"
  remoteConfig: {
    uri: ${secondaryEnvironmentUri}
  }
}

scenarioRepositoryLocation: ${storageDir}"/scenarioRepository"

commentSettings: {
  substitutionPattern: "(issues/[0-9]*)"
  substitutionLink: "https://github.com/TouK/nussknacker/$1"
}

deploymentCommentSettings: {
  validationPattern: "(.*)"
  exampleComment: "issues/1234"
}

countsSettings {
  influxUrl: "http://influxdb:8086/query"
  influxUrl: ${?INFLUXDB_URL}"/query"
  database: "esp"
}

codeSuggestionsFromBackend: false

developmentMode: true
developmentMode: ${?DEVELOPMENT_MODE}
