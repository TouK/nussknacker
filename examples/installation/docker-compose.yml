name: nussknacker

services:

  ### Nussknacker designer service

  designer:
    image: touk/nussknacker:latest_scala-2.12
    restart: unless-stopped
    environment:
#      CONFIG_FILE: ${NUSSKNACKER_CONFIG_FILE-/opt/nussknacker/conf/application.conf,/opt/nussknacker/conf/nussknacker.conf}
      JDK_JAVA_OPTIONS: -Xmx1024M
      USAGE_REPORTS_SOURCE: "example-installation-docker-compose"
      NUSSKNACKER_LOG_LEVEL: DEBUG
      KAFKA_ADDRESS: kafka:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      GRAFANA_URL: http://grafana:3000/grafana
      INFLUXDB_URL: http://influxdb:8086
#      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005
      FLINK_REST_URL: http://flink-jobmanager:8081
      FLINK_QUERYABLE_STATE_PROXY_URL: flink-taskmanager:9069
    depends_on:
      grafana:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      flink-jobmanager:
        condition: service_healthy
      flink-taskmanager:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:8080/api/app/healthCheck" ]
      interval: 10s
      retries: 10
    volumes:
      - nussknacker_designer_data:/opt/nussknacker/storage
#      - ${BASE_PATH}/nussknacker/nussknacker.conf:/opt/nussknacker/conf/nussknacker.conf

  ### Nussknacker metrics-related services:

  grafana:
    image: grafana/grafana:8.4.11 # TODO: can we bump it?
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:/grafana
      - GF_SECURITY_ALLOW_EMBEDDING=true
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3000"]
      interval: 10s
      retries: 10
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards

  influxdb:
    image: influxdb:1.8.10 # todo: bump to 1.11.5?
    restart: unless-stopped
    hostname: influxdb
    environment:
      INFLUXDB_DB: esp
#      INFLUXDB_DB: nussknacker_metrics
    healthcheck:
      test: [ "CMD-SHELL", "influx -execute 'SHOW DATABASES'" ]
      interval: 10s
      retries: 10

  nginx:
    image: nginx:1.17.6
    restart: unless-stopped
    ports:
      - 8080:80
    depends_on:
      grafana:
        condition: service_healthy
      designer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      retries: 10
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/additional:/etc/nginx/additional

  ### KAFKA-related services:

  kafka:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    hostname: nu-kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      retries: 10

  schema-registry:
    image: bitnami/schema-registry:7.2.10
    restart: unless-stopped
    environment:
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      # todo: verify it really works (grep)
      test: [ "CMD-SHELL", 'echo -e "GET /subjects HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n" | nc localhost 8081 | grep "HTTP/1.1 200 OK" | exit 0' ]
      interval: 10s
      retries: 10

  akhq:
    image: tchiotludo/akhq:0.24.0
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        micronaut:
          server:
            context-path: /akhq
        akhq:
          connections:
            nussknacker-kafka:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8081"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080" ]
      interval: 10s
      retries: 10

  ### FLINK-related services

  flink-jobmanager:
    image: apache/flink:1.18.1-scala_2.12-java11
    restart: unless-stopped
    command: jobmanager
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink-jobmanager
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/jobs/overview" ]
      interval: 10s
      retries: 10

  flink-taskmanager:
    image: apache/flink:1.18.1-scala_2.12-java11
    restart: unless-stopped
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
      - |
        FLINK_PROPERTIES=
        metrics.reporters: influxdb_reporter
        metrics.reporter.influxdb_reporter.factory.class: org.apache.flink.metrics.influxdb.InfluxdbReporterFactory
        metrics.reporter.influxdb_reporter.host: telegraf
        metrics.reporter.influxdb_reporter.port: 8087
        metrics.reporter.influxdb_reporter.db: esp
        metrics.reporter.influxdb_reporter.scope.variables.excludes: tm_id;job_id;task_id;task_attempt_id;operator_id;task_attempt_num;task_name
        metrics.scope.jm: local.<host>.jobmanagerGlobal
        metrics.scope.jm.job: local.<host>.jobmanagerJob.<job_name>
        metrics.scope.tm: local.<host>.taskmanagerGlobal.<tm_id>
        metrics.scope.tm.job: local.<host>.taskmanagerJob.<tm_id>.<job_name>
        metrics.scope.task: local.<host>.taskmanagerTask.<tm_id>.<job_name>.<task_name>.<subtask_index>
        metrics.scope.operator: local.<host>.taskmanagerTask.<tm_id>.<job_name>.<operator_name>.<subtask_index>
    depends_on:
      flink-jobmanager:
        condition: service_healthy
      telegraf:
        condition: service_healthy

  telegraf:
    image: telegraf:1.20.4
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8087/write" ]
      interval: 10s
      retries: 10
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf

volumes:
  nussknacker_designer_data:
    name: nussknacker_designer_data

# QUESTIONS:
# 1. what's the Nu main DB? Postgres or HSQL?
