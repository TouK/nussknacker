#this should be the same as workflow name in test-report.yml
name: CI
on:
  pull_request:
    branches:
      - master
      - staging
      - demo
      - preview/*
      - release/*
    paths-ignore:
      - '**.md'
      - 'docs/**'
  push:
    branches:
      - master
      - staging
      - demo
      - preview/*
      - release/*
    paths-ignore:
      - '**.md'
      - 'docs/**'
    #TODO: currently release is done manually, we don't want to run this pipeline on released version, to avoid accidental pushes
    tags-ignore:
      - '**'
env:
  #we use this variable in ciRunSbt.sh
  #NOTE: for publishing we use different settings, we don't use ciRunSbt.sh there
  CROSS_BUILD: ${{ github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      fe_changes_count: ${{ steps.filter.outputs.fe_changes_count }}
      all_changes_count: ${{ steps.filter.outputs.all_changes_count }}
      git_source_branch: ${{ steps.variables.outputs.git_source_branch }}
      nk_snapshot_version: ${{ steps.variables.outputs.nk_snapshot_version }}
      scala_version_matrix: ${{ steps.variables.outputs.scala_version_matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: 'csv'
          filters: |
            fe_changes:
              - 'designer/client/**'
              - 'designer/submodules/**'
              - 'docs/**'
              - '**.md'
            all_changes:
              - '**'
      - name: Define variables
        id: variables
        shell: bash
        run: |
          GIT_SOURCE_BRANCH=`([ "${GITHUB_HEAD_REF}" != "" ] && echo "${GITHUB_HEAD_REF}" || echo "${GITHUB_REF}") | sed 's/refs\/heads\///g'`
          SANITIZED_BRANCH=`echo ${GIT_SOURCE_BRANCH} | sed 's/[^a-zA-Z0-9._-]/\_/g' | awk '{print tolower($0)}'`
          VERSION_SUFFIX="-$SANITIZED_BRANCH-$(date -I)-$GITHUB_RUN_NUMBER-${GITHUB_SHA::9}"
          NK_SNAPSHOT_VERSION=`cat version.sbt | sed -e 's/.*:= *"//' -e 's/" *//' | sed "s/-SNAPSHOT/${VERSION_SUFFIX}-SNAPSHOT/"`
          echo "git_source_branch=$GIT_SOURCE_BRANCH" >> $GITHUB_OUTPUT
          echo "nk_snapshot_version=$NK_SNAPSHOT_VERSION" >> $GITHUB_OUTPUT
          if [[ $CROSS_BUILD == 'true' ]]; then
            echo "scala_version_matrix=[\"2.12\",\"2.13\"]" >> $GITHUB_OUTPUT
          else
            echo "scala_version_matrix=[\"2.13\"]" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [ setup ]
    env:
      # We can't just use conditional jobs mechanism ('if' directive) because 'cypressTests' job depends on this one
      shouldPerformBackendBuild: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Cancel previous runs
        if: ${{ env.shouldPerformBackendBuild == 'true' && github.event_name != 'push' }}
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
      - uses: coursier/setup-action@v1
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        with:
          jvm: temurin:1.11.0.17
      - name: Cache ivy packages
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: sbt
      - name: Build
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        shell: bash
        run: CROSS_BUILD=false ./ciRunSbt.sh Compile/compile Test/compile
      - name: Tar artifacts
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        shell: bash
        run:  find . -wholename "**/target/**/*" -printf '%P\0' | tar --null -C '.' --files-from=- -czf 'target.tgz'
      - name: Store target
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: build-target
          path: target.tgz

  build-fe:
    name: BuildFrontend
    runs-on: ubuntu-latest
    needs: [ setup ]
    env:
      NUSSKNACKER_VERSION: ${{ needs.setup.outputs.nk_snapshot_version }}
    steps:
      - name: Cancel previous runs
        if: github.event_name != 'push'
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
      - name: Cache npm
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/Cypress
          key: ${{ hashFiles('designer/client/package-lock.json', 'designer/client/.nvmrc', 'designer/submodules/package-lock.json', 'designer/submodules/.nvmrc') }}
      - name: Get Node.js version
        id: nvm
        run: echo "NODE_VERSION=$(cat designer/client/.nvmrc)" >> $GITHUB_OUTPUT
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
      - name: Download node modules
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: |
          npm ci --no-audit --prefix designer/client
          npm ci --no-audit --prefix designer/submodules
      - name: Build FE
        run: (cd designer/client; npm run build)
      - name: Build FE submodules
        run: |
          cd designer
          cp -r client/.federated-types/nussknackerUi submodules/types/@remote
          cd submodules
          npm run build
      - name: Tar fe artifacts
        shell: bash
        run:  tar -czf 'fe-dist.tgz' designer/client/dist designer/submodules/dist
      - name: Store dist
        uses: actions/upload-artifact@v3
        with:
          name: build-fe-dist
          path: fe-dist.tgz


  crossCompile:
    name: CrossCompile
    runs-on: ubuntu-latest
    needs: [ build, setup ]
    if: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Cancel previous runs
        if: github.event_name != 'push'
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
      - uses: coursier/setup-action@v1
        with:
          jvm: temurin:1.11.0.17
      - name: Cache ivy packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: sbt
      - uses: actions/download-artifact@v3
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Compile
        shell: bash
        run: CROSS_BUILD=true ./ciRunSbt.sh Compile/compile Test/compile
  #TODO: extract to different workflow?
  publish:
    runs-on: ubuntu-latest
    needs: [build, build-fe, setup, crossCompile]
    #TODO: should we publish everything on all those branches?
    if: ${{ github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    env:
      #TODO: shouldn't be needed...
      nexusUrl: https://oss.sonatype.org/content/repositories/snapshots
      # We add dev model to staging because it is used in dev used on this environment, but we also add it for other branches for purpose of cypress tests
      addDevArtifacts: true
      NUSSKNACKER_VERSION: ${{ needs.setup.outputs.nk_snapshot_version }}
      GIT_SOURCE_BRANCH: ${{ needs.setup.outputs.git_source_branch }}
      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USER }}
      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
    steps:
      - name: Cancel previous runs
        if: github.event_name != 'push'
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
      - uses: coursier/setup-action@v1
        with:
          jvm: temurin:1.11.0.17
      - name: Cache ivy packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: sbt
      - uses: actions/download-artifact@v3
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - uses: actions/download-artifact@v3
        with:
          name: build-fe-dist
      - name: Untar fe artifacts
        shell: bash
        run:  tar xfz fe-dist.tgz
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup buildx builder
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          config-inline: |
            [worker.oci]
              max-parallelism = 1
      - name: Try to free space
        run: |
          # Workaround to prevent "no space left on device" during buildx build - https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android 
      - name: Publish with scaladocs
        if: ${{ github.ref == 'refs/heads/staging' }}
        env:
          # Workaround to preveent "no space left on device" during publishDocker failed to create temp dir: mkdir /tmp/containerd-mountXYZ
          TMPDIR: ${{ github.workspace }}
        shell: bash
        #TODO: handle version better, do we want to publish docker image for older scala versions? If so, how should it be tagged?
        run: sbt "set ThisBuild / version := \"$NUSSKNACKER_VERSION\"" +publish +dist/Docker/publish +liteEngineRuntimeApp/Docker/publish
      - name: Publish without scaladocs
        if: ${{ github.ref != 'refs/heads/staging' }}
        env:
          # Workaround to preveent "no space left on device" during publishDocker failed to create temp dir: mkdir /tmp/containerd-mountXYZ
          TMPDIR: ${{ github.workspace }}
        shell: bash
        #TODO: handle version better, do we want to publish docker image for older scala versions? If so, how should it be tagged?
        run: sbt "set ThisBuild / version := \"$NUSSKNACKER_VERSION\"; set ThisBuild / packageDoc / publishArtifact := false; set Compile / doc / sources := Seq.empty" +publish +dist/Docker/publish +liteEngineRuntimeApp/Docker/publish

  trigger-external-build:
    runs-on: ubuntu-latest
    needs: [ setup, publish ]
    if: ${{ github.ref == 'refs/heads/staging' }}
    strategy:
      matrix:
        include:
          - repo: nussknacker-helm
            workflow_id: helm-test-workflow.yaml
            ref: main
          - repo: nussknacker-quickstart
            workflow_id: pr.yml
            ref: staging
          - repo: nussknacker-quickstart
            workflow_id: benchmark-workflow.yml
            ref: staging
          - repo: nussknacker-sample-components
            workflow_id: pr.yml
            ref: staging
          - repo: nussknacker-flink-compatibility
            workflow_id: test.yml
            ref: staging
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ORG_TRIGGER_PAT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: '${{ matrix.repo }}',
              workflow_id: '${{ matrix.workflow_id }}',
              ref: '${{ matrix.ref }}',
              inputs: {"nussknacker_version": "${{ needs.setup.outputs.nk_snapshot_version }}"}
            })
