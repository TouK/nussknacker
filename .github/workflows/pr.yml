name: CI
on:
  pull_request:
    branches:
      - master
      - staging
      - demo
      - preview/*
      - release/*
    paths-ignore:
      - '**.md'
      - 'docs/**'
  push:
    branches:
      - master
      - staging
      - demo
      - preview/*
      - release/*
    paths-ignore:
      - '**.md'
      - 'docs/**'
    #TODO: currently release is done manually, we don't want to run this pipeline on released version, to avoid accidental pushes
    tags-ignore:
      - '**'
env:
  #we use this variable in ciRunSbt.sh
  #NOTE: for publishing we use different settings, we don't use ciRunSbt.sh there
  CROSS_BUILD: ${{ github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      fe_changes_count: ${{ steps.filter.outputs.fe_changes_count }}
      all_changes_count: ${{ steps.filter.outputs.all_changes_count }}
      git_source_branch: ${{ steps.variables.outputs.git_source_branch }}
      nk_snapshot_version: ${{ steps.variables.outputs.nk_snapshot_version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: 'csv'
          filters: |
            fe_changes:
              - 'ui/client/**'
              - 'ui/submodules/**'
            all_changes:
              - '**'
      - name: Define variables
        id: variables
        shell: bash
        run: |
          GIT_SOURCE_BRANCH=`([ "${GITHUB_HEAD_REF}" != "" ] && echo "${GITHUB_HEAD_REF}" || echo "${GITHUB_REF}") | sed 's/refs\/heads\///g'`
          SANITIZED_BRANCH=`echo ${GIT_SOURCE_BRANCH} | sed 's/[^a-zA-Z0-9._-]/\_/g' | awk '{print tolower($0)}'`
          VERSION_SUFFIX="-$SANITIZED_BRANCH-$(date -I)-$GITHUB_RUN_NUMBER-$GITHUB_SHA"
          NK_SNAPSHOT_VERSION=`cat version.sbt | sed -e 's/.*:= *"//' -e 's/" *//' | sed "s/-SNAPSHOT/${VERSION_SUFFIX}-SNAPSHOT/"`
          echo "::set-output name=git_source_branch::$GIT_SOURCE_BRANCH"
          echo "::set-output name=nk_snapshot_version::$NK_SNAPSHOT_VERSION"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [ setup ]
    env:
      # We can't just use conditional jobs mechanism ('if' directive) because 'dockerTest' job depends on this one
      shouldPerformBackendBuild: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Cancel previous runs
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
      - uses: olafurpg/setup-scala@v10
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        with:
          java-version: "openjdk@1.11"
      - name: Cache ivy packages
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - name: Build
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        shell: bash
        run: ./ciRunSbt.sh compile
      - name: Tar artifacts
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        shell: bash
        run:  find . -wholename "**/target/**/*" -printf '%P\0' | tar --null -C '.' --files-from=- -czf 'target.tgz'
      - name: Store target
        if: ${{ env.shouldPerformBackendBuild == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: build-target
          path: target.tgz

  build-fe:
    name: BuildFrontend
    runs-on: ubuntu-latest
    needs: [ setup ]
    env:
      NUSSKNACKER_VERSION: ${{ needs.setup.outputs.nk_snapshot_version }}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: Cache npm
        id: cache-npm
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-${{ hashFiles('ui/client/package-lock.json', 'ui/client/.nvmrc', 'ui/submodules/package-lock.json', 'ui/submodules/.nvmrc') }}
      - name: Get Node.js version
        id: nvm
        run: echo ::set-output name=NODE_VERSION::$(cat ui/client/.nvmrc)
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
      - name: Download node modules
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: |
          npm ci --no-audit --prefix ui/client
          npm ci --no-audit --prefix ui/submodules
      - name: Build FE
        run: (cd ui/client; npm run build)
      - name: Build FE submodules
        run: |
          cd ui
          cp -r client/.federated-types/nussknackerUi submodules/types/@remote
          cd submodules
          npm run build
      - name: Tar fe artifacts
        shell: bash
        run:  tar -czf 'fe-dist.tgz' ui/client/dist ui/submodules/dist
      - name: Store dist
        uses: actions/upload-artifact@v2
        with:
          name: build-fe-dist
          path: fe-dist.tgz

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: [ build, setup ]
    if: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v10
        with:
          java-version: "openjdk@1.11"
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - name: Backend tests with coverage
        shell: bash
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: ./ciRunSbt.sh coverage test coverageReport
      - name: Backend tests without coverage
        shell: bash
        if: ${{ github.ref != 'refs/heads/staging' }}
        run: ./ciRunSbt.sh test
      - name: Test Report
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: BackendTests-results
          path: '**/test-reports/*.xml'
      - name: Upload Coverage data to Coveralls
        shell: bash
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: ./ciRunSbt.sh coverageAggregate coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  crossCompile:
    name: CrossCompile
    runs-on: ubuntu-latest
    needs: [ build, setup ]
    if: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v10
        with:
          java-version: "openjdk@1.11"
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Compile
        shell: bash
        run: CROSS_BUILD=true ./ciRunSbt.sh Compile/compile Test/compile
  integrationTests:
    name: IntegrationTests
    needs: [ build, setup ]
    if: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v10
        with:
          java-version: "openjdk@1.11"
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Integration tests
        shell: bash
        env:
          dockerUpLatest: true
        run: ./ciRunSbt.sh It/test
      - name: Test Report
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: IntegrationTests-results
          path: '**/it-reports/*.xml'

  slowTests:
    name: Slow tests
    runs-on: ubuntu-latest
    needs: [ build, setup ]
    if: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v10
        with:
          java-version: "openjdk@1.11"
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Slow tests
        shell: bash
        run: ./ciRunSbt.sh ui/Slow/test
      - name: Test Report
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: SlowTests-results
          path: '**/test-reports/*.xml'

  frontendTests:
    name: FrontendTests
    runs-on: ubuntu-latest
    needs: [ setup ]
    env:
      # We can't just use conditional jobs mechanism ('if' directive) because 'publish' job depends on this one.
      shouldPerformFrontendTests: ${{ needs.setup.outputs.fe_changes_count > 0 }}
    steps:
      - name: Cancel previous runs
        if: ${{ env.shouldPerformFrontendTests == 'true' }}
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
        if: ${{ env.shouldPerformFrontendTests == 'true' }}
      - name: Cache npm
        id: cache-npm
        if: ${{ env.shouldPerformFrontendTests == 'true' }}
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-${{ hashFiles('ui/client/package-lock.json', 'ui/client/.nvmrc', 'ui/submodules/package-lock.json', 'ui/submodules/.nvmrc') }}
      - name: Get Node.js version
        if: ${{ env.shouldPerformFrontendTests == 'true' }}
        id: nvm
        run: echo ::set-output name=NODE_VERSION::$(cat ui/client/.nvmrc)
      - name: Use Node.js ${{ matrix.node-version }}
        if: ${{ env.shouldPerformFrontendTests == 'true' }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
      - name: Download node modules
        if: ${{ env.shouldPerformFrontendTests == 'true' && steps.cache-npm.outputs.cache-hit != 'true' }}
        run: |
          npm ci --no-audit --prefix ui/client
          npm ci --no-audit --prefix ui/submodules
      - name: Test FE
        if: ${{ env.shouldPerformFrontendTests == 'true' }}
        run: (cd ui/client; npm run test:unit)
      - name: Test Report
        if: ${{ env.shouldPerformFrontendTests == 'true' && (success() || failure()) }}
        uses: actions/upload-artifact@v2
        with:
          name: FrontendTests-results
          path: ui/client/junit.xml

  dockerTest:
    name: Docker based tests
    runs-on: ubuntu-latest
    needs: [ build, build-fe, setup ]
    env:
      # We skip docker build for fe-only changes. Would be more clean to split this step into two steps: build image and run tests
      # e.g. by using ishworkh/docker-image-artifact-upload/download but it caused ~3min overhead for the whole pipeline so we
      # have this conditional logic in this step. We force building images on our "special" branches because run between merges
      # could cause that cypress tests will be run at stale image (because of cancel-workflow-action).
      shouldBuildImage: ${{ needs.setup.outputs.fe_changes_count != needs.setup.outputs.all_changes_count || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
      GIT_SOURCE_BRANCH: ${{ needs.setup.outputs.git_source_branch }}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: Cache npm
        id: cache-npm
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-${{ hashFiles('ui/client/package-lock.json', 'ui/client/.nvmrc', 'ui/submodules/package-lock.json', 'ui/submodules/.nvmrc') }}
      - name: Get Node.js version
        id: nvm
        run: echo ::set-output name=NODE_VERSION::$(cat ui/client/.nvmrc)
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
      - name: Download node modules
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: |
          npm ci --no-audit --prefix ui/client
          npm ci --no-audit --prefix ui/submodules
      - uses: olafurpg/setup-scala@v10
        if: ${{ env.shouldBuildImage == 'true' }}
        with:
          java-version: "openjdk@1.11"
      - name: Cache ivy packages
        if: ${{ env.shouldBuildImage == 'true' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: actions/download-artifact@v2
        if: ${{ env.shouldBuildImage == 'true' }}
        with:
          name: build-target
      - name: Untar artifacts
        if: ${{ env.shouldBuildImage == 'true' }}
        shell: bash
        run:  tar xfz target.tgz
      - uses: actions/download-artifact@v2
        with:
          name: build-fe-dist
      - name: Untar fe artifacts
        shell: bash
        run:  tar xfz fe-dist.tgz
      - name: set version
        if: ${{ env.shouldBuildImage == 'true' }}
        shell: bash
        run: echo "NUSSKNACKER_VERSION=${{ needs.setup.outputs.nk_snapshot_version }}" >> $GITHUB_ENV
      - name: Prepare docker
        if: ${{ env.shouldBuildImage == 'true' }}
        env:
          addDevModel: true
        shell: bash
        #Doc generation is rather costly, we don't want it in test image creation
        run: sbt "set version in ThisBuild := \"$NUSSKNACKER_VERSION\"; set publishArtifact in (ThisBuild, packageDoc) := false; set sources in (Compile,doc) := Seq.empty" dist/Docker/publishLocal
      - name: FE tests e2e on build docker image
        if: ${{ env.shouldBuildImage == 'true' }}
        env:
          CYPRESS_BASE_URL: http://localhost:8080
          DOCKER_PULL_OPTION: never
        shell: bash
        run: |
          cd ui/client
          npx start-server-and-test backend:docker 8080 test:e2e
      - name: Determine docker tag version to use
        if: ${{ env.shouldBuildImage == 'false' }}
        shell: bash
        run: |
          # Take a look at build.sbt commonDockerSettings to see how this tag is determined. Thanks to fact that we publish all changes pushed to our "special" branches it should work quite correctly.
          NK_REF_VERSION=`[ "${GITHUB_REF}" != "" ] && echo "${GITHUB_REF}" | sed -e 's/refs\/heads\///g' -e 's/[^a-zA-Z0-9._-]/\_/g' -e 's/$/-latest/' | xargs -I VER sh -c 'docker pull touk/nussknacker:VER > /dev/null && echo VER || echo ""'`
          NK_BASE_REF_VERSION=`[ "${NK_REF_VERSION}" != "" ] && echo "${NK_REF_VERSION}" || [ "${GITHUB_BASE_REF}" != "" ] && echo "${GITHUB_BASE_REF}" | sed -e 's/refs\/heads\///g' -e 's/[^a-zA-Z0-9._-]/\_/g' -e 's/$/-latest/' | xargs -I VER sh -c 'docker pull touk/nussknacker:VER > /dev/null && echo VER || echo ""'`
          echo "NUSSKNACKER_VERSION=`[ \"${NK_BASE_REF_VERSION}\" != \"\" ] && echo \"${NK_BASE_REF_VERSION}\" || echo staging-latest`" >> $GITHUB_ENV
      - name: FE tests e2e on pulled image
        if: ${{ env.shouldBuildImage == 'false' }}
        shell: bash
        run: |
          cd ui/client
          npx start-server-and-test backend:docker 8080 start-prod 3000 test:e2e
      - name: Find diffs
        if: failure() && github.event.pull_request.head.repo.full_name == github.repository
        id: snapshots_diffs
        shell: bash
        run: |
          echo ::set-output name=found::$(ls ui/client/cypress/integration/__image_snapshots__/*.diff.png | wc -l)
      - name: Test Report
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: CypressTests-results
          path: ui/client/cypress-test-results/*.xml
      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e-test-results
          path: |
            ui/client/cypress/**/__image_snapshots__/
            ui/client/cypress/screenshots/
            ui/client/cypress/videos/
          if-no-files-found: ignore
      - name: FE tests e2e on build docker image with CYPRESS_SNAPSHOT_UPDATE
        if: ${{ always() && steps.snapshots_diffs.outputs.found > 0 && env.shouldBuildImage == 'true' }}
        env:
          CYPRESS_SNAPSHOT_UPDATE: "true"
          CYPRESS_BASE_URL: http://localhost:8080
          DOCKER_PULL_OPTION: never
        shell: bash
        run: |
          cd ui/client
          npx start-server-and-test backend:docker 8080 test:e2e
      - name: FE tests e2e on pulled image with CYPRESS_SNAPSHOT_UPDATE
        if: ${{ always() && steps.snapshots_diffs.outputs.found > 0 && env.shouldBuildImage == 'false' }}
        env:
          CYPRESS_SNAPSHOT_UPDATE: "true"
        shell: bash
        run: |
          cd ui/client
          npx start-server-and-test backend:docker 8080 start-prod 3000 test:e2e
      - name: Create Pull Request
        id: update_snapshots
        if: always() && steps.snapshots_diffs.outputs.found > 0
        env:
          HASH: ${{ format('#{0}', github.event.number) }}
          BRANCH: ${{ needs.setup.outputs.git_source_branch }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ env.BRANCH }}
          branch: snapshots-patch/${{ env.BRANCH }}
          title: Update Cypress snapshots in ${{ env.BRANCH }}
          commit-message: Updated snapshots
          body: Updated snapshots in ${{ github.event_name == 'pull_request' && env.HASH || env.BRANCH}}
        uses: peter-evans/create-pull-request@v3
      - name: Comment PR
        if: ${{ always() && github.event_name == 'pull_request' && steps.update_snapshots.outputs.pull-request-number }}
        uses: thollander/actions-comment-pull-request@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: '${{ steps.update_snapshots.outputs.pull-request-operation }}: #${{ steps.update_snapshots.outputs.pull-request-number }}'

  #TODO: extract to different workflow?
  publish:
    runs-on: ubuntu-latest
    needs: [build, build-fe, setup, tests, crossCompile, integrationTests, slowTests, frontendTests, dockerTest]
    #TODO: should we publish everything on all those branches?
    if: ${{ github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/demo' || startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/release') }}
    env:
      #TODO: shouldn't be needed...
      nexusUrl: https://oss.sonatype.org/content/repositories/snapshots
      nexusUser: ${{ secrets.SONATYPE_USER }}
      nexusPassword: ${{ secrets.SONATYPE_PASSWORD }}
      # We add dev model to staging because it is used in dev used on this environment, but we also add it for other branches for purpose of cypress tests
      addDevModel: true
      NUSSKNACKER_VERSION: ${{ needs.setup.outputs.nk_snapshot_version }}
      GIT_SOURCE_BRANCH: ${{ needs.setup.outputs.git_source_branch }}
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v10
        with:
          java-version: "openjdk@1.11"
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.cache/coursier
            ~/.sbt
          key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - uses: actions/download-artifact@v2
        with:
          name: build-fe-dist
      - name: Untar fe artifacts
        shell: bash
        run:  tar xfz fe-dist.tgz
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Publish with scaladocs
        if: ${{ github.ref == 'refs/heads/staging' }}
        shell: bash
        #TODO: handle version better, do we want to publish docker image for older scala versions? If so, how should it be tagged?
        run: sbt -J-Xms1000M -J-Xmx1000M "set version in ThisBuild := \"$NUSSKNACKER_VERSION\"" +publish dist/Docker/publish requestResponseApp/Docker/publish liteKafkaEngineRuntime/Docker/publish
      - name: Publish without scaladocs
        if: ${{ github.ref != 'refs/heads/staging' }}
        shell: bash
        #TODO: handle version better, do we want to publish docker image for older scala versions? If so, how should it be tagged?
        run: sbt -J-Xms1000M -J-Xmx1000M "set version in ThisBuild := \"$NUSSKNACKER_VERSION\"; set publishArtifact in (ThisBuild, packageDoc) := false; set sources in (Compile,doc) := Seq.empty" +publish dist/Docker/publish requestResponseApp/Docker/publish
