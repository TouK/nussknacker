name: PR Build
on:
  pull_request:
    branches:
      - master
      - staging

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: olafurpg/setup-scala@v10
      - name: Build
        shell: bash
        run: ./ciRunSbt.sh clean compile
      - name: Tar artifacts
        shell: bash
        run:  find . -wholename "**/target/**/*" -printf '%P\0' | tar --null -C '.' --files-from=- -czf 'target.tgz'
      - name: Store target
        uses: actions/upload-artifact@v2
        with:
          name: build-target
          path: target.tgz
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - uses: olafurpg/setup-scala@v10
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - name: Backend tests
        shell: bash
        #TODO: coverage?
        run: ./ciRunSbt.sh test

  crossCompile:
    name: CrossCompile
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v1
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: olafurpg/setup-scala@v10
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Compile
        shell: bash
        run: CROSS_BUILD=true ./ciRunSbt.sh compile:compile test:compile
  integrationTests:
    name: IntegrationTests
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: olafurpg/setup-scala@v10
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Integration tests
        shell: bash
        run: ./ciRunSbt.sh flinkProcessManager/it:test engineStandalone/it:test
  slowTest:
    name: Slow tests
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v1
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: olafurpg/setup-scala@v10
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: Slow tests
        shell: bash
        run: ./ciRunSbt.sh ui/slow:test

  frontendTests:
    name: FrontendTests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 14.11.0
      - run: ./ciFrontendTest.sh
  dockerTest:
    name: DockerTest
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v1
      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 14.11.0
      - name: Cache ivy packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-ivy2-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-sbt
      - uses: olafurpg/setup-scala@v10
      - uses: actions/download-artifact@v2
        with:
          name: build-target
      - name: Untar artifacts
        shell: bash
        run:  tar xfz target.tgz
      - name: setup node
        shell: bash
        run: (cd ui/client; npm ci)
      - name: Prepare docker
        shell: bash
        run: echo "version in ThisBuild := \"$GITHUB_SHA\"" > version.sbt && ./ciRunSbt.sh dist/docker:publishLocal
      - name: Test docker
        shell: bash
        run: cd ./demo/docker && echo "NUSSKNACKER_VERSION=$GITHUB_SHA" > .env && ./testQuickstart.sh
